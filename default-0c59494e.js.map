{"version":3,"sources":["../src/lib/actions.js","../src/lib/components/Header/index.js","../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../src/lib/components/BaseElement/index.js","../node_modules/wicg-inert/src/inert.js","../src/lib/components/SideNav/index.js","../node_modules/focus-visible/dist/focus-visible.js","../src/lib/app.js"],"names":["expandSideNav","store","action","document","body","classList","add","main","querySelector","header","inert","isSideNavExpanded","collapseSideNav","remove","checkIfUserAcceptsCookies","localStorage","getItem","userAcceptsCookies","showingSnackbar","snackbarType","setUserAcceptsCookies","setItem","Header","HTMLElement","[object Object]","this","hamburgerBtn","addEventListener","onStateChanged","bind","subscribe","unsubscribe","isSearchExpanded","currentUrl","toggle","active","updated","replace","removeAttribute","setAttribute","focus","customElements","define","directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","result","element","parts","nodesToRemove","stack","walker","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","DefaultTemplateProcessor","prefix","defaultTemplateProcessor","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","render","firstChild","Object","assign","appendInto","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","insertNodeIntoTemplate","refNode","insertCount","walkerIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","removeStylesFromLitTemplates","templates","styles","Set","from","querySelectorAll","shadyRenderSet","prepareTemplateStyles","renderedDOM","templateElement","condensedStyle","style","textContent","nativeShadow","removes","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","litRender","delete","styleElement","_a","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","finalized","UpdatingElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","_requestUpdate","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","_getUpdateComplete","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","arrayFlat","flattenStyles","flat","Infinity","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","cssText","localName","connectedCallback","templateResult","BaseElement","matches","Element","msMatchesSelector","_focusableElementsString","InertRoot","rootElement","inertManager","_inertManager","_rootElement","_managedNodes","hasAttribute","_savedAriaHidden","_makeSubtreeUnfocusable","_observer","MutationObserver","_onMutation","observe","childList","subtree","disconnect","inertNode","_unmanageNode","managedNodes","hasSavedAriaHidden","savedAriaHidden","ariaHidden","composedTreeWalk","_visitNode","activeElement","contains","root","DOCUMENT_FRAGMENT_NODE","blur","ELEMENT_NODE","_adoptInertRoot","_manageNode","register","deregister","inertSubroot","getInertRoot","setInert","savedInertNode","records","self","record","target","addedNodes","removedNodes","_unmanageSubtree","attributeName","managedNode","InertNode","inertRoot","_node","_overrodeFocusMethod","_inertRoots","_savedTabIndex","_destroyed","ensureUntabbable","_throwIfDestroyed","destroyed","hasSavedTabIndex","savedTabIndex","tabIndex","destructor","InertManager","_document","_watchForInert","addInertStyle","head","documentElement","readyState","_onDocumentLoaded","addInertRoot","removeInertRoot","inertElement","_this","inertElements","callback","shadowRootAncestor","shadowRoot","distributedNodes","getDistributedNodes","slot","assignedNodes","flatten","child","SideNav","animatable","expanded","expanded_","startX_","currentX_","touchingSideNav_","prerenderedChildren_","onCloseSideNav","onTouchStart","onTouchMove","onTouchEnd","onTransitionEnd","drag","onKeyUp","children","onBlockClicks","sideNavContainerEl","addEventListeners","getState","touches","pageX","requestAnimationFrame","translateX","min","transform","closest","stopPropagation","manageFocus","val","oldVal","requestUpdate","disconnectedCallback","applyFocusVisiblePolyfill","scope","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","search","url","tel","email","password","number","date","month","week","time","datetime","datetime-local","isValidFocusTarget","el","addFocusVisibleClass","onPointerDown","addInitialPointerMoveListeners","onInitialPointerMove","metaKey","altKey","ctrlKey","visibilityState","readOnly","isContentEditable","clearTimeout","setTimeout","DOCUMENT_NODE","CustomEvent","error","createEvent","initCustomEvent","dispatchEvent","factory","onGlobalStateChanged","isSignedIn","isPageLoading","hidden"],"mappings":"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","sourcesContent":["import {store} from \"./store\";\n\nexport const expandSideNav = store.action(() => {\n    document.body.classList.add(\"web-side-nav--expanded\");\n    const main = document.querySelector(\"main\");\n    const header = document.querySelector(\"web-header\");\n    main.inert = true;\n    header.inert = true;\n    return {isSideNavExpanded: true};\n  });\n  \n  export const collapseSideNav = store.action(() => {\n    document.body.classList.remove(\"web-side-nav--expanded\");\n    const main = document.querySelector(\"main\");\n    const header = document.querySelector(\"web-header\");\n    main.inert = false;\n    header.inert = false;\n    return {isSideNavExpanded: false};\n  });\n\nexport const checkIfUserAcceptsCookies = store.action(() => {\n    if (localStorage.getItem(\"web-accepts-cookies\")) {\n        return {\n            userAcceptsCookies: true,\n        };\n    }\n\n    return {showingSnackbar: true, snackbarType: \"cookies\"};\n});\n\nexport const setUserAcceptsCookies = store.action(() => {\n    localStorage.setItem(\"web-accepts-cookies\", 1);\n    return {\n        userAcceptsCookies: true,\n        showingSnackbar: false,\n        // Note we don't set the snackbarType to null because that would cause the\n        // snackbar to re-render and break the animation.\n        // Instead, snackbarType is allowed to stick around and future updates can\n        // overwrite it.\n    };\n});","/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview A responsive header that can trigger a side-nav.\n */\n\nimport {store} from \"../../store\";\nimport {expandSideNav} from \"../../actions\";\n\nclass Header extends HTMLElement {\n    connectedCallback() {\n        this.hamburgerBtn = this.querySelector(\".web-header__hamburger-btn\");\n        this.hamburgerBtn.addEventListener(\"click\", expandSideNav);\n\n        this.onStateChanged = this.onStateChanged.bind(this);\n        store.subscribe(this.onStateChanged);\n    }\n\n    disconnectedCallBack() {\n        store.unsubscribe(this.onStateChanged);\n    }\n\n    onStateChanged({isSearchExpanded, currentUrl}) {\n        this.classList.toggle(\"web-header--has-expanded-search\", isSearchExpanded);\n\n        // Ensure that the \"active\" attribute is applied to any matching header\n        // link, or to none (for random subpages or articles).\n        const active = this.querySelector(\"[active]\");\n        const updated = this.querySelector(\n            `[href=\"${currentUrl.replace(/\"/g, '\\\\\"')}\"]`,\n        );\n\n        if (active === updated) {\n            return;\n        }\n\n        if (active) {\n            active.removeAttribute(\"active\");\n            active.removeAttribute(\"aria-current\");\n        }\n\n        if (updated) {\n            updated.setAttribute(\"active\", \"\");\n            updated.setAttribute(\"aria-current\", \"page\");\n        }\n    }\n\n    /**\n     * This is called bt the SideNav to return focus to this control when the\n     * use closes the SideNav.\n     * THis is important for accessibility.\n     */\n    manageFocus() {\n        this.hamburgerBtn.focus();\n    }\n}\n\ncustomElements.define(\"web-header\", Header);\n\n ","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import {LitElement} from \"lit-element\";\n\nexport class BaseElement extends LitElement {\n    constructor() {\n        super();\n    }\n\n    createRenderRoot() {\n        // Diable shadow DOM.\n        // Instead templates will be rendered in the light DOM.\n        return this;\n    }\n}","/**\n * This work is licensed under the W3C Software and Document License\n * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).\n */\n\n// Convenience function for converting NodeLists.\n/** @type {typeof Array.prototype.slice} */\nconst slice = Array.prototype.slice;\n\n/**\n * IE has a non-standard name for \"matches\".\n * @type {typeof Element.prototype.matches}\n */\nconst matches =\n    Element.prototype.matches || Element.prototype.msMatchesSelector;\n\n/** @type {string} */\nconst _focusableElementsString = ['a[href]',\n                                  'area[href]',\n                                  'input:not([disabled])',\n                                  'select:not([disabled])',\n                                  'textarea:not([disabled])',\n                                  'button:not([disabled])',\n                                  'iframe',\n                                  'object',\n                                  'embed',\n                                  '[contenteditable]'].join(',');\n\n/**\n * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`\n * attribute.\n *\n * Its main functions are:\n *\n * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the\n *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering\n *   each focusable node in the subtree with the singleton `InertManager` which manages all known\n *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`\n *   instance exists for each focusable node which has at least one inert root as an ancestor.\n *\n * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`\n *   attribute is removed from the root node). This is handled in the destructor, which calls the\n *   `deregister` method on `InertManager` for each managed inert node.\n */\nclass InertRoot {\n  /**\n   * @param {!Element} rootElement The Element at the root of the inert subtree.\n   * @param {!InertManager} inertManager The global singleton InertManager object.\n   */\n  constructor(rootElement, inertManager) {\n    /** @type {!InertManager} */\n    this._inertManager = inertManager;\n\n    /** @type {!Element} */\n    this._rootElement = rootElement;\n\n    /**\n     * @type {!Set<!InertNode>}\n     * All managed focusable nodes in this InertRoot's subtree.\n     */\n    this._managedNodes = new Set();\n\n    // Make the subtree hidden from assistive technology\n    if (this._rootElement.hasAttribute('aria-hidden')) {\n      /** @type {?string} */\n      this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');\n    } else {\n      this._savedAriaHidden = null;\n    }\n    this._rootElement.setAttribute('aria-hidden', 'true');\n\n    // Make all focusable elements in the subtree unfocusable and add them to _managedNodes\n    this._makeSubtreeUnfocusable(this._rootElement);\n\n    // Watch for:\n    // - any additions in the subtree: make them unfocusable too\n    // - any removals from the subtree: remove them from this inert root's managed nodes\n    // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable\n    //   element, make that node a managed node.\n    this._observer = new MutationObserver(this._onMutation.bind(this));\n    this._observer.observe(this._rootElement, {attributes: true, childList: true, subtree: true});\n  }\n\n  /**\n   * Call this whenever this object is about to become obsolete.  This unwinds all of the state\n   * stored in this object and updates the state of all of the managed nodes.\n   */\n  destructor() {\n    this._observer.disconnect();\n\n    if (this._rootElement) {\n      if (this._savedAriaHidden !== null) {\n        this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);\n      } else {\n        this._rootElement.removeAttribute('aria-hidden');\n      }\n    }\n\n    this._managedNodes.forEach(function(inertNode) {\n      this._unmanageNode(inertNode.node);\n    }, this);\n\n    // Note we cast the nulls to the ANY type here because:\n    // 1) We want the class properties to be declared as non-null, or else we\n    //    need even more casts throughout this code. All bets are off if an\n    //    instance has been destroyed and a method is called.\n    // 2) We don't want to cast \"this\", because we want type-aware optimizations\n    //    to know which properties we're setting.\n    this._observer = /** @type {?} */ (null);\n    this._rootElement = /** @type {?} */ (null);\n    this._managedNodes = /** @type {?} */ (null);\n    this._inertManager = /** @type {?} */ (null);\n  }\n\n  /**\n   * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.\n   */\n  get managedNodes() {\n    return new Set(this._managedNodes);\n  }\n\n  /** @return {boolean} */\n  get hasSavedAriaHidden() {\n    return this._savedAriaHidden !== null;\n  }\n\n  /** @param {?string} ariaHidden */\n  set savedAriaHidden(ariaHidden) {\n    this._savedAriaHidden = ariaHidden;\n  }\n\n  /** @return {?string} */\n  get savedAriaHidden() {\n    return this._savedAriaHidden;\n  }\n\n  /**\n   * @param {!Node} startNode\n   */\n  _makeSubtreeUnfocusable(startNode) {\n    composedTreeWalk(startNode, (node) => this._visitNode(node));\n\n    let activeElement = document.activeElement;\n\n    if (!document.body.contains(startNode)) {\n      // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.\n      let node = startNode;\n      /** @type {!ShadowRoot|undefined} */\n      let root = undefined;\n      while (node) {\n        if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n          root = /** @type {!ShadowRoot} */ (node);\n          break;\n        }\n        node = node.parentNode;\n      }\n      if (root) {\n        activeElement = root.activeElement;\n      }\n    }\n    if (startNode.contains(activeElement)) {\n      activeElement.blur();\n      // In IE11, if an element is already focused, and then set to tabindex=-1\n      // calling blur() will not actually move the focus.\n      // To work around this we call focus() on the body instead.\n      if (activeElement === document.activeElement) {\n        document.body.focus();\n      }\n    }\n  }\n\n  /**\n   * @param {!Node} node\n   */\n  _visitNode(node) {\n    if (node.nodeType !== Node.ELEMENT_NODE) {\n      return;\n    }\n    const element = /** @type {!Element} */ (node);\n\n    // If a descendant inert root becomes un-inert, its descendants will still be inert because of\n    // this inert root, so all of its managed nodes need to be adopted by this InertRoot.\n    if (element !== this._rootElement && element.hasAttribute('inert')) {\n      this._adoptInertRoot(element);\n    }\n\n    if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {\n      this._manageNode(element);\n    }\n  }\n\n  /**\n   * Register the given node with this InertRoot and with InertManager.\n   * @param {!Node} node\n   */\n  _manageNode(node) {\n    const inertNode = this._inertManager.register(node, this);\n    this._managedNodes.add(inertNode);\n  }\n\n  /**\n   * Unregister the given node with this InertRoot and with InertManager.\n   * @param {!Node} node\n   */\n  _unmanageNode(node) {\n    const inertNode = this._inertManager.deregister(node, this);\n    if (inertNode) {\n      this._managedNodes.delete(inertNode);\n    }\n  }\n\n  /**\n   * Unregister the entire subtree starting at `startNode`.\n   * @param {!Node} startNode\n   */\n  _unmanageSubtree(startNode) {\n    composedTreeWalk(startNode, (node) => this._unmanageNode(node));\n  }\n\n  /**\n   * If a descendant node is found with an `inert` attribute, adopt its managed nodes.\n   * @param {!Element} node\n   */\n  _adoptInertRoot(node) {\n    let inertSubroot = this._inertManager.getInertRoot(node);\n\n    // During initialisation this inert root may not have been registered yet,\n    // so register it now if need be.\n    if (!inertSubroot) {\n      this._inertManager.setInert(node, true);\n      inertSubroot = this._inertManager.getInertRoot(node);\n    }\n\n    inertSubroot.managedNodes.forEach(function(savedInertNode) {\n      this._manageNode(savedInertNode.node);\n    }, this);\n  }\n\n  /**\n   * Callback used when mutation observer detects subtree additions, removals, or attribute changes.\n   * @param {!Array<!MutationRecord>} records\n   * @param {!MutationObserver} self\n   */\n  _onMutation(records, self) {\n    records.forEach(function(record) {\n      const target = /** @type {!Element} */ (record.target);\n      if (record.type === 'childList') {\n        // Manage added nodes\n        slice.call(record.addedNodes).forEach(function(node) {\n          this._makeSubtreeUnfocusable(node);\n        }, this);\n\n        // Un-manage removed nodes\n        slice.call(record.removedNodes).forEach(function(node) {\n          this._unmanageSubtree(node);\n        }, this);\n      } else if (record.type === 'attributes') {\n        if (record.attributeName === 'tabindex') {\n          // Re-initialise inert node if tabindex changes\n          this._manageNode(target);\n        } else if (target !== this._rootElement &&\n                   record.attributeName === 'inert' &&\n                   target.hasAttribute('inert')) {\n          // If a new inert root is added, adopt its managed nodes and make sure it knows about the\n          // already managed nodes from this inert subroot.\n          this._adoptInertRoot(target);\n          const inertSubroot = this._inertManager.getInertRoot(target);\n          this._managedNodes.forEach(function(managedNode) {\n            if (target.contains(managedNode.node)) {\n              inertSubroot._manageNode(managedNode.node);\n            }\n          });\n        }\n      }\n    }, this);\n  }\n}\n\n/**\n * `InertNode` initialises and manages a single inert node.\n * A node is inert if it is a descendant of one or more inert root elements.\n *\n * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and\n * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element\n * is intrinsically focusable or not.\n *\n * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an\n * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the\n * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s\n * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,\n * or removes the `tabindex` attribute if the element is intrinsically focusable.\n */\nclass InertNode {\n  /**\n   * @param {!Node} node A focusable element to be made inert.\n   * @param {!InertRoot} inertRoot The inert root element associated with this inert node.\n   */\n  constructor(node, inertRoot) {\n    /** @type {!Node} */\n    this._node = node;\n\n    /** @type {boolean} */\n    this._overrodeFocusMethod = false;\n\n    /**\n     * @type {!Set<!InertRoot>} The set of descendant inert roots.\n     *    If and only if this set becomes empty, this node is no longer inert.\n     */\n    this._inertRoots = new Set([inertRoot]);\n\n    /** @type {?number} */\n    this._savedTabIndex = null;\n\n    /** @type {boolean} */\n    this._destroyed = false;\n\n    // Save any prior tabindex info and make this node untabbable\n    this.ensureUntabbable();\n  }\n\n  /**\n   * Call this whenever this object is about to become obsolete.\n   * This makes the managed node focusable again and deletes all of the previously stored state.\n   */\n  destructor() {\n    this._throwIfDestroyed();\n\n    if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {\n      const element = /** @type {!Element} */ (this._node);\n      if (this._savedTabIndex !== null) {\n        element.setAttribute('tabindex', this._savedTabIndex);\n      } else {\n        element.removeAttribute('tabindex');\n      }\n\n      // Use `delete` to restore native focus method.\n      if (this._overrodeFocusMethod) {\n        delete element.focus;\n      }\n    }\n\n    // See note in InertRoot.destructor for why we cast these nulls to ANY.\n    this._node = /** @type {?} */ (null);\n    this._inertRoots = /** @type {?} */ (null);\n    this._destroyed = true;\n  }\n\n  /**\n   * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.\n   * If the object has been destroyed, any attempt to access it will cause an exception.\n   */\n  get destroyed() {\n    return /** @type {!InertNode} */ (this)._destroyed;\n  }\n\n  /**\n   * Throw if user tries to access destroyed InertNode.\n   */\n  _throwIfDestroyed() {\n    if (this.destroyed) {\n      throw new Error('Trying to access destroyed InertNode');\n    }\n  }\n\n  /** @return {boolean} */\n  get hasSavedTabIndex() {\n    return this._savedTabIndex !== null;\n  }\n\n  /** @return {!Node} */\n  get node() {\n    this._throwIfDestroyed();\n    return this._node;\n  }\n\n  /** @param {?number} tabIndex */\n  set savedTabIndex(tabIndex) {\n    this._throwIfDestroyed();\n    this._savedTabIndex = tabIndex;\n  }\n\n  /** @return {?number} */\n  get savedTabIndex() {\n    this._throwIfDestroyed();\n    return this._savedTabIndex;\n  }\n\n  /** Save the existing tabindex value and make the node untabbable and unfocusable */\n  ensureUntabbable() {\n    if (this.node.nodeType !== Node.ELEMENT_NODE) {\n      return;\n    }\n    const element = /** @type {!Element} */ (this.node);\n    if (matches.call(element, _focusableElementsString)) {\n      if (/** @type {!HTMLElement} */ (element).tabIndex === -1 &&\n          this.hasSavedTabIndex) {\n        return;\n      }\n\n      if (element.hasAttribute('tabindex')) {\n        this._savedTabIndex = /** @type {!HTMLElement} */ (element).tabIndex;\n      }\n      element.setAttribute('tabindex', '-1');\n      if (element.nodeType === Node.ELEMENT_NODE) {\n        element.focus = function() {};\n        this._overrodeFocusMethod = true;\n      }\n    } else if (element.hasAttribute('tabindex')) {\n      this._savedTabIndex = /** @type {!HTMLElement} */ (element).tabIndex;\n      element.removeAttribute('tabindex');\n    }\n  }\n\n  /**\n   * Add another inert root to this inert node's set of managing inert roots.\n   * @param {!InertRoot} inertRoot\n   */\n  addInertRoot(inertRoot) {\n    this._throwIfDestroyed();\n    this._inertRoots.add(inertRoot);\n  }\n\n  /**\n   * Remove the given inert root from this inert node's set of managing inert roots.\n   * If the set of managing inert roots becomes empty, this node is no longer inert,\n   * so the object should be destroyed.\n   * @param {!InertRoot} inertRoot\n   */\n  removeInertRoot(inertRoot) {\n    this._throwIfDestroyed();\n    this._inertRoots.delete(inertRoot);\n    if (this._inertRoots.size === 0) {\n      this.destructor();\n    }\n  }\n}\n\n/**\n * InertManager is a per-document singleton object which manages all inert roots and nodes.\n *\n * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`\n * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.\n * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant\n * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance\n * is created for each such node, via the `_managedNodes` map.\n */\nclass InertManager {\n  /**\n   * @param {!Document} document\n   */\n  constructor(document) {\n    if (!document) {\n      throw new Error('Missing required argument; InertManager needs to wrap a document.');\n    }\n\n    /** @type {!Document} */\n    this._document = document;\n\n    /**\n     * All managed nodes known to this InertManager. In a map to allow looking up by Node.\n     * @type {!Map<!Node, !InertNode>}\n     */\n    this._managedNodes = new Map();\n\n    /**\n     * All inert roots known to this InertManager. In a map to allow looking up by Node.\n     * @type {!Map<!Node, !InertRoot>}\n     */\n    this._inertRoots = new Map();\n\n    /**\n     * Observer for mutations on `document.body`.\n     * @type {!MutationObserver}\n     */\n    this._observer = new MutationObserver(this._watchForInert.bind(this));\n\n    // Add inert style.\n    addInertStyle(document.head || document.body || document.documentElement);\n\n    // Wait for document to be loaded.\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));\n    } else {\n      this._onDocumentLoaded();\n    }\n  }\n\n  /**\n   * Set whether the given element should be an inert root or not.\n   * @param {!Element} root\n   * @param {boolean} inert\n   */\n  setInert(root, inert) {\n    if (inert) {\n      if (this._inertRoots.has(root)) { // element is already inert\n        return;\n      }\n\n      const inertRoot = new InertRoot(root, this);\n      root.setAttribute('inert', '');\n      this._inertRoots.set(root, inertRoot);\n      // If not contained in the document, it must be in a shadowRoot.\n      // Ensure inert styles are added there.\n      if (!this._document.body.contains(root)) {\n        let parent = root.parentNode;\n        while (parent) {\n          if (parent.nodeType === 11) {\n            addInertStyle(parent);\n          }\n          parent = parent.parentNode;\n        }\n      }\n    } else {\n      if (!this._inertRoots.has(root)) { // element is already non-inert\n        return;\n      }\n\n      const inertRoot = this._inertRoots.get(root);\n      inertRoot.destructor();\n      this._inertRoots.delete(root);\n      root.removeAttribute('inert');\n    }\n  }\n\n  /**\n   * Get the InertRoot object corresponding to the given inert root element, if any.\n   * @param {!Node} element\n   * @return {!InertRoot|undefined}\n   */\n  getInertRoot(element) {\n    return this._inertRoots.get(element);\n  }\n\n  /**\n   * Register the given InertRoot as managing the given node.\n   * In the case where the node has a previously existing inert root, this inert root will\n   * be added to its set of inert roots.\n   * @param {!Node} node\n   * @param {!InertRoot} inertRoot\n   * @return {!InertNode} inertNode\n   */\n  register(node, inertRoot) {\n    let inertNode = this._managedNodes.get(node);\n    if (inertNode !== undefined) { // node was already in an inert subtree\n      inertNode.addInertRoot(inertRoot);\n    } else {\n      inertNode = new InertNode(node, inertRoot);\n    }\n\n    this._managedNodes.set(node, inertNode);\n\n    return inertNode;\n  }\n\n  /**\n   * De-register the given InertRoot as managing the given inert node.\n   * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert\n   * node from the InertManager's set of managed nodes if it is destroyed.\n   * If the node is not currently managed, this is essentially a no-op.\n   * @param {!Node} node\n   * @param {!InertRoot} inertRoot\n   * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.\n   */\n  deregister(node, inertRoot) {\n    const inertNode = this._managedNodes.get(node);\n    if (!inertNode) {\n      return null;\n    }\n\n    inertNode.removeInertRoot(inertRoot);\n    if (inertNode.destroyed) {\n      this._managedNodes.delete(node);\n    }\n\n    return inertNode;\n  }\n\n  /**\n   * Callback used when document has finished loading.\n   */\n  _onDocumentLoaded() {\n    // Find all inert roots in document and make them actually inert.\n    const inertElements = slice.call(this._document.querySelectorAll('[inert]'));\n    inertElements.forEach(function(inertElement) {\n      this.setInert(inertElement, true);\n    }, this);\n\n    // Comment this out to use programmatic API only.\n    this._observer.observe(this._document.body, {attributes: true, subtree: true, childList: true});\n  }\n\n  /**\n   * Callback used when mutation observer detects attribute changes.\n   * @param {!Array<!MutationRecord>} records\n   * @param {!MutationObserver} self\n   */\n  _watchForInert(records, self) {\n    const _this = this;\n    records.forEach(function(record) {\n      switch (record.type) {\n      case 'childList':\n        slice.call(record.addedNodes).forEach(function(node) {\n          if (node.nodeType !== Node.ELEMENT_NODE) {\n            return;\n          }\n          const inertElements = slice.call(node.querySelectorAll('[inert]'));\n          if (matches.call(node, '[inert]')) {\n            inertElements.unshift(node);\n          }\n          inertElements.forEach(function(inertElement) {\n            this.setInert(inertElement, true);\n          }, _this);\n        }, _this);\n        break;\n      case 'attributes':\n        if (record.attributeName !== 'inert') {\n          return;\n        }\n        const target = /** @type {!Element} */ (record.target);\n        const inert = target.hasAttribute('inert');\n        _this.setInert(target, inert);\n        break;\n      }\n    }, this);\n  }\n}\n\n/**\n * Recursively walk the composed tree from |node|.\n * @param {!Node} node\n * @param {(function (!Element))=} callback Callback to be called for each element traversed,\n *     before descending into child nodes.\n * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.\n */\nfunction composedTreeWalk(node, callback, shadowRootAncestor) {\n  if (node.nodeType == Node.ELEMENT_NODE) {\n    const element = /** @type {!Element} */ (node);\n    if (callback) {\n      callback(element);\n    }\n\n    // Descend into node:\n    // If it has a ShadowRoot, ignore all child elements - these will be picked\n    // up by the <content> or <shadow> elements. Descend straight into the\n    // ShadowRoot.\n    const shadowRoot = /** @type {!HTMLElement} */ (element).shadowRoot;\n    if (shadowRoot) {\n      composedTreeWalk(shadowRoot, callback, shadowRoot);\n      return;\n    }\n\n    // If it is a <content> element, descend into distributed elements - these\n    // are elements from outside the shadow root which are rendered inside the\n    // shadow DOM.\n    if (element.localName == 'content') {\n      const content = /** @type {!HTMLContentElement} */ (element);\n      // Verifies if ShadowDom v0 is supported.\n      const distributedNodes = content.getDistributedNodes ?\n        content.getDistributedNodes() : [];\n      for (let i = 0; i < distributedNodes.length; i++) {\n        composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n      }\n      return;\n    }\n\n    // If it is a <slot> element, descend into assigned nodes - these\n    // are elements from outside the shadow root which are rendered inside the\n    // shadow DOM.\n    if (element.localName == 'slot') {\n      const slot = /** @type {!HTMLSlotElement} */ (element);\n      // Verify if ShadowDom v1 is supported.\n      const distributedNodes = slot.assignedNodes ?\n        slot.assignedNodes({flatten: true}) : [];\n      for (let i = 0; i < distributedNodes.length; i++) {\n        composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n      }\n      return;\n    }\n  }\n\n  // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>\n  // element, nor a <shadow> element recurse normally.\n  let child = node.firstChild;\n  while (child != null) {\n    composedTreeWalk(child, callback, shadowRootAncestor);\n    child = child.nextSibling;\n  }\n}\n\n/**\n * Adds a style element to the node containing the inert specific styles\n * @param {!Node} node\n */\nfunction addInertStyle(node) {\n  if (node.querySelector('style#inert-style')) {\n    return;\n  }\n  const style = document.createElement('style');\n  style.setAttribute('id', 'inert-style');\n  style.textContent = '\\n'+\n                      '[inert] {\\n' +\n                      '  pointer-events: none;\\n' +\n                      '  cursor: default;\\n' +\n                      '}\\n' +\n                      '\\n' +\n                      '[inert], [inert] * {\\n' +\n                      '  user-select: none;\\n' +\n                      '  -webkit-user-select: none;\\n' +\n                      '  -moz-user-select: none;\\n' +\n                      '  -ms-user-select: none;\\n' +\n                      '}\\n';\n  node.appendChild(style);\n}\n\n/** @type {!InertManager} */\nconst inertManager = new InertManager(document);\n\nif (!Element.prototype.hasOwnProperty('inert')) {\n  Object.defineProperty(Element.prototype, 'inert', {\n    enumerable: true,\n    /** @this {!Element} */\n    get: function() {\n      return this.hasAttribute('inert');\n    },\n    /** @this {!Element} */\n    set: function(inert) {\n      inertManager.setInert(this, inert);\n    },\n  });\n}\n","/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {html} from \"lit-element\";\nimport {BaseElement} from \"../BaseElement\";\nimport {store} from \"../../store\";\nimport \"wicg-inert\";\nimport {collapseSideNav} from \"../../actions\";\n\nclass SideNav extends BaseElement {\n  static get properties() {\n    return {\n      animatable: {type: Boolean, reflect: true},\n      expanded: {type: Boolean, reflect: true},\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.inert = true;\n    this.animatable = false;\n    this.expanded_ = false;\n    this.startX_ = 0;\n    this.currentX_ = 0;\n    this.touchingSideNav_ = false;\n    this.prerenderedChildren_ = null;\n\n    this.onCloseSideNav = this.onCloseSideNav.bind(this);\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchMove = this.onTouchMove.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.onTransitionEnd = this.onTransitionEnd.bind(this);\n    this.drag = this.drag.bind(this);\n    this.onStateChanged = this.onStateChanged.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n  }\n\n  render() {\n    if (!this.prerenderedChildren_) {\n      this.prerenderedChildren_ = [];\n      for (const child of this.children) {\n        this.prerenderedChildren_.push(child);\n      }\n    }\n    return html`\n      <nav @click=\"${this.onBlockClicks}\" class=\"web-side-nav__container\">\n        <div class=\"web-side-nav__header\">\n          <button\n            @click=${this.onCloseSideNav}\n            class=\"web-side-nav__hide\"\n          ></button>\n          <a\n            href=\"/\"\n            class=\"gc-analytics-event\"\n            data-category=\"Site-Wide Custom Events\"\n            data-label=\"Site logo\"\n          >\n            <img\n              class=\"web-side-nav__logo\"\n              src=\"/images/logo.svg\"\n              alt=\"web.dev\"\n            />\n          </a>\n        </div>\n        ${this.prerenderedChildren_}\n      </nav>\n    `;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.tabIndex = -1;\n    store.subscribe(this.onStateChanged);\n  }\n\n  firstUpdated() {\n    this.sideNavContainerEl = this.querySelector(\".web-side-nav__container\");\n    this.addEventListeners();\n    this.onStateChanged();\n    this.classList.remove(\"unresolved\");\n  }\n\n  addEventListeners() {\n    this.addEventListener(\"click\", this.onCloseSideNav);\n    this.addEventListener(\"touchstart\", this.onTouchStart, {passive: true});\n    this.addEventListener(\"touchmove\", this.onTouchMove, {passive: true});\n    this.addEventListener(\"touchend\", this.onTouchEnd);\n  }\n\n  onStateChanged() {\n    const {isSideNavExpanded} = store.getState();\n    if (isSideNavExpanded === this.expanded) {\n      return;\n    }\n\n    this.expanded = isSideNavExpanded;\n  }\n\n  onTouchStart(e) {\n    if (!this.expanded) {\n      return;\n    }\n\n    this.startX_ = e.touches[0].pageX;\n    this.currentX_ = this.startX_;\n\n    this.touchingSideNav_ = true;\n    requestAnimationFrame(this.drag);\n  }\n\n  onTouchMove(e) {\n    if (!this.touchingSideNav_) {\n      return;\n    }\n\n    this.currentX_ = e.touches[0].pageX;\n  }\n\n  onTouchEnd(e) {\n    if (!this.touchingSideNav_) {\n      return;\n    }\n\n    this.touchingSideNav_ = false;\n\n    const translateX = Math.min(0, this.currentX_ - this.startX_);\n    this.sideNavContainerEl.style.transform = \"\";\n\n    if (translateX < 0) {\n      this.onCloseSideNav();\n    }\n  }\n\n  drag() {\n    if (!this.touchingSideNav_) {\n      return;\n    }\n\n    requestAnimationFrame(this.drag);\n\n    const translateX = Math.min(0, this.currentX_ - this.startX_);\n    this.sideNavContainerEl.style.transform = `translateX(${translateX}px)`;\n  }\n\n  onBlockClicks(e) {\n    // When the SideNav is expanded we use a ::before element to render the\n    // overlay. Because the ::before element is a child of SideNav, and covers\n    // the entire page, we add a listener to SideNav to see if it was clicked\n    // on.\n    // If a link within the SideNav was clicked, we allow the click to happen so\n    // the router can know about it.\n    // If the SideNav's .web-side-nav__container was clicked, we block the click\n    // so the SideNav won't collapse.\n    // If the click was outside of the container/on the overlay, we close the\n    // SideNav.\n    const link = e.target.closest(\"a\");\n    if (!link) {\n      e.stopPropagation();\n    }\n  }\n\n  onTransitionEnd() {\n    this.animatable = false;\n    // If the SideNav is expanded we need to move focus into the element so\n    // folks using a screen reader or switch can access it.\n    if (this.expanded_) {\n      this.focus();\n    } else {\n      // When the SideNav is collapsed, we need to restore focus to the\n      // hamburger button in the header. It might be more techincally pure to\n      // use a unistore action for this, but it feels like a lot of ceremony\n      // for a small behavior.\n      document.querySelector(\"web-header\").manageFocus();\n    }\n    this.inert = !this.expanded_;\n  }\n\n  onCloseSideNav() {\n    // It's important to call the closeSideNav() action here instead of just\n    // setting expanded = false.\n    // The closeSideNav() action will inform other page elements that they\n    // should un-inert themselves.\n    collapseSideNav();\n  }\n\n  onKeyUp(e) {\n    if (e.key === \"Escape\") {\n      collapseSideNav();\n      document.removeEventListener(\"keyup\", this.onKeyUp);\n    }\n  }\n\n  set expanded(val) {\n    if (this.expanded_ === val) {\n      return;\n    }\n\n    const oldVal = this.expanded_;\n    this.expanded_ = val;\n    this.animatable = true;\n    if (this.expanded_) {\n      document.addEventListener(\"keyup\", this.onKeyUp);\n    }\n    this.addEventListener(\"transitionend\", this.onTransitionEnd, {once: true});\n    this.requestUpdate(\"expanded\", oldVal);\n  }\n\n  get expanded() {\n    return this.expanded_;\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    store.unsubscribe(this.onStateChanged);\n  }\n}\n\ncustomElements.define(\"web-side-nav\", SideNav);\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (factory());\n}(this, (function () { 'use strict';\n\n  /**\n   * Applies the :focus-visible polyfill at the given scope.\n   * A scope in this case is either the top-level Document or a Shadow Root.\n   *\n   * @param {(Document|ShadowRoot)} scope\n   * @see https://github.com/WICG/focus-visible\n   */\n  function applyFocusVisiblePolyfill(scope) {\n    var hadKeyboardEvent = true;\n    var hadFocusVisibleRecently = false;\n    var hadFocusVisibleRecentlyTimeout = null;\n\n    var inputTypesWhitelist = {\n      text: true,\n      search: true,\n      url: true,\n      tel: true,\n      email: true,\n      password: true,\n      number: true,\n      date: true,\n      month: true,\n      week: true,\n      time: true,\n      datetime: true,\n      'datetime-local': true\n    };\n\n    /**\n     * Helper function for legacy browsers and iframes which sometimes focus\n     * elements like document, body, and non-interactive SVG.\n     * @param {Element} el\n     */\n    function isValidFocusTarget(el) {\n      if (\n        el &&\n        el !== document &&\n        el.nodeName !== 'HTML' &&\n        el.nodeName !== 'BODY' &&\n        'classList' in el &&\n        'contains' in el.classList\n      ) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Computes whether the given element should automatically trigger the\n     * `focus-visible` class being added, i.e. whether it should always match\n     * `:focus-visible` when focused.\n     * @param {Element} el\n     * @return {boolean}\n     */\n    function focusTriggersKeyboardModality(el) {\n      var type = el.type;\n      var tagName = el.tagName;\n\n      if (tagName == 'INPUT' && inputTypesWhitelist[type] && !el.readOnly) {\n        return true;\n      }\n\n      if (tagName == 'TEXTAREA' && !el.readOnly) {\n        return true;\n      }\n\n      if (el.isContentEditable) {\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Add the `focus-visible` class to the given element if it was not added by\n     * the author.\n     * @param {Element} el\n     */\n    function addFocusVisibleClass(el) {\n      if (el.classList.contains('focus-visible')) {\n        return;\n      }\n      el.classList.add('focus-visible');\n      el.setAttribute('data-focus-visible-added', '');\n    }\n\n    /**\n     * Remove the `focus-visible` class from the given element if it was not\n     * originally added by the author.\n     * @param {Element} el\n     */\n    function removeFocusVisibleClass(el) {\n      if (!el.hasAttribute('data-focus-visible-added')) {\n        return;\n      }\n      el.classList.remove('focus-visible');\n      el.removeAttribute('data-focus-visible-added');\n    }\n\n    /**\n     * If the most recent user interaction was via the keyboard;\n     * and the key press did not include a meta, alt/option, or control key;\n     * then the modality is keyboard. Otherwise, the modality is not keyboard.\n     * Apply `focus-visible` to any current active element and keep track\n     * of our keyboard modality state with `hadKeyboardEvent`.\n     * @param {KeyboardEvent} e\n     */\n    function onKeyDown(e) {\n      if (e.metaKey || e.altKey || e.ctrlKey) {\n        return;\n      }\n\n      if (isValidFocusTarget(scope.activeElement)) {\n        addFocusVisibleClass(scope.activeElement);\n      }\n\n      hadKeyboardEvent = true;\n    }\n\n    /**\n     * If at any point a user clicks with a pointing device, ensure that we change\n     * the modality away from keyboard.\n     * This avoids the situation where a user presses a key on an already focused\n     * element, and then clicks on a different element, focusing it with a\n     * pointing device, while we still think we're in keyboard modality.\n     * @param {Event} e\n     */\n    function onPointerDown(e) {\n      hadKeyboardEvent = false;\n    }\n\n    /**\n     * On `focus`, add the `focus-visible` class to the target if:\n     * - the target received focus as a result of keyboard navigation, or\n     * - the event target is an element that will likely require interaction\n     *   via the keyboard (e.g. a text box)\n     * @param {Event} e\n     */\n    function onFocus(e) {\n      // Prevent IE from focusing the document or HTML element.\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n        addFocusVisibleClass(e.target);\n      }\n    }\n\n    /**\n     * On `blur`, remove the `focus-visible` class from the target.\n     * @param {Event} e\n     */\n    function onBlur(e) {\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (\n        e.target.classList.contains('focus-visible') ||\n        e.target.hasAttribute('data-focus-visible-added')\n      ) {\n        // To detect a tab/window switch, we look for a blur event followed\n        // rapidly by a visibility change.\n        // If we don't see a visibility change within 100ms, it's probably a\n        // regular focus change.\n        hadFocusVisibleRecently = true;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {\n          hadFocusVisibleRecently = false;\n          window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        }, 100);\n        removeFocusVisibleClass(e.target);\n      }\n    }\n\n    /**\n     * If the user changes tabs, keep track of whether or not the previously\n     * focused element had .focus-visible.\n     * @param {Event} e\n     */\n    function onVisibilityChange(e) {\n      if (document.visibilityState == 'hidden') {\n        // If the tab becomes active again, the browser will handle calling focus\n        // on the element (Safari actually calls it twice).\n        // If this tab change caused a blur on an element with focus-visible,\n        // re-apply the class when the user switches back to the tab.\n        if (hadFocusVisibleRecently) {\n          hadKeyboardEvent = true;\n        }\n        addInitialPointerMoveListeners();\n      }\n    }\n\n    /**\n     * Add a group of listeners to detect usage of any pointing devices.\n     * These listeners will be added when the polyfill first loads, and anytime\n     * the window is blurred, so that they are active when the window regains\n     * focus.\n     */\n    function addInitialPointerMoveListeners() {\n      document.addEventListener('mousemove', onInitialPointerMove);\n      document.addEventListener('mousedown', onInitialPointerMove);\n      document.addEventListener('mouseup', onInitialPointerMove);\n      document.addEventListener('pointermove', onInitialPointerMove);\n      document.addEventListener('pointerdown', onInitialPointerMove);\n      document.addEventListener('pointerup', onInitialPointerMove);\n      document.addEventListener('touchmove', onInitialPointerMove);\n      document.addEventListener('touchstart', onInitialPointerMove);\n      document.addEventListener('touchend', onInitialPointerMove);\n    }\n\n    function removeInitialPointerMoveListeners() {\n      document.removeEventListener('mousemove', onInitialPointerMove);\n      document.removeEventListener('mousedown', onInitialPointerMove);\n      document.removeEventListener('mouseup', onInitialPointerMove);\n      document.removeEventListener('pointermove', onInitialPointerMove);\n      document.removeEventListener('pointerdown', onInitialPointerMove);\n      document.removeEventListener('pointerup', onInitialPointerMove);\n      document.removeEventListener('touchmove', onInitialPointerMove);\n      document.removeEventListener('touchstart', onInitialPointerMove);\n      document.removeEventListener('touchend', onInitialPointerMove);\n    }\n\n    /**\n     * When the polfyill first loads, assume the user is in keyboard modality.\n     * If any event is received from a pointing device (e.g. mouse, pointer,\n     * touch), turn off keyboard modality.\n     * This accounts for situations where focus enters the page from the URL bar.\n     * @param {Event} e\n     */\n    function onInitialPointerMove(e) {\n      // Work around a Safari quirk that fires a mousemove on <html> whenever the\n      // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n      if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {\n        return;\n      }\n\n      hadKeyboardEvent = false;\n      removeInitialPointerMoveListeners();\n    }\n\n    // For some kinds of state, we are interested in changes at the global scope\n    // only. For example, global pointer input, global key presses and global\n    // visibility change should affect the state at every scope:\n    document.addEventListener('keydown', onKeyDown, true);\n    document.addEventListener('mousedown', onPointerDown, true);\n    document.addEventListener('pointerdown', onPointerDown, true);\n    document.addEventListener('touchstart', onPointerDown, true);\n    document.addEventListener('visibilitychange', onVisibilityChange, true);\n\n    addInitialPointerMoveListeners();\n\n    // For focus and blur, we specifically care about state changes in the local\n    // scope. This is because focus / blur events that originate from within a\n    // shadow root are not re-dispatched from the host element if it was already\n    // the active element in its own scope:\n    scope.addEventListener('focus', onFocus, true);\n    scope.addEventListener('blur', onBlur, true);\n\n    // We detect that a node is a ShadowRoot by ensuring that it is a\n    // DocumentFragment and also has a host property. This check covers native\n    // implementation and polyfill implementation transparently. If we only cared\n    // about the native implementation, we could just check if the scope was\n    // an instance of a ShadowRoot.\n    if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {\n      // Since a ShadowRoot is a special kind of DocumentFragment, it does not\n      // have a root element to add a class to. So, we add this attribute to the\n      // host element instead:\n      scope.host.setAttribute('data-js-focus-visible', '');\n    } else if (scope.nodeType === Node.DOCUMENT_NODE) {\n      document.documentElement.classList.add('js-focus-visible');\n    }\n  }\n\n  // It is important to wrap all references to global window and document in\n  // these checks to support server-side rendering use cases\n  // @see https://github.com/WICG/focus-visible/issues/199\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    // Make the polyfill helper globally available. This can be used as a signal\n    // to interested libraries that wish to coordinate with the polyfill for e.g.,\n    // applying the polyfill to a shadow root:\n    window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill;\n\n    // Notify interested libraries of the polyfill's presence, in case the\n    // polyfill was loaded lazily:\n    var event;\n\n    try {\n      event = new CustomEvent('focus-visible-polyfill-ready');\n    } catch (error) {\n      // IE11 does not support using CustomEvent as a constructor directly:\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});\n    }\n\n    window.dispatchEvent(event);\n  }\n\n  if (typeof document !== 'undefined') {\n    // Apply the polyfill to the global document, so that no JavaScript\n    // coordination is required to use the polyfill in the top-level document:\n    applyFocusVisiblePolyfill(document);\n  }\n\n})));\n","import \"./components/Header\";\nimport \"./components/SideNav\";\nimport {store} from \"./store\";\nimport \"focus-visible\";\nimport { checkIfUserAcceptsCookies } from \"./actions\";\n\n// Configures global page state\nfunction onGlobalStateChanged({isSignedIn, isPageLoading}) {\n    const progress = document.querySelector(\".w-loading-progress\");\n    progress.hidden = !isPageLoading;\n\n    const main = document.querySelector(\"main\");\n    if (isPageLoading) {\n        main.setAttribute(\"aria-busy\", \"true\");\n    } else {\n        main.removeAttribute(\"aria-busy\");\n    }\n}\n\nstore.subscribe(onGlobalStateChanged);\nonGlobalStateChanged(store.getState());\n\n// Give elemetns time to set up before kicking off state changes.\n// This is useful for elements with CSS animations who need to have been\n// rendered to the page at least once before they start transitioning.\n// CUrrently this includes the Snackbar.\nsetTimeout(() => {\n    checkIfUserAcceptsCookies();\n}, 0);"]}