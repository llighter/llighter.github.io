{"version":3,"sources":["../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../src/lib/components/BaseElement/index.js","../node_modules/style-inject/dist/style-inject.es.js","../src/lib/components/CopyCode/index.js","../src/lib/actions.js","../src/lib/components/Header/index.js","../node_modules/wicg-inert/dist/inert.esm.js","../src/lib/components/SideNav/index.js","../node_modules/focus-visible/dist/focus-visible.js","../src/lib/app.js"],"names":["isCEPolyfill","window","customElements","undefined","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","walkerNodeFilter","removeNodesFromTemplate","template","nextActiveIndexInTemplateParts","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","has","forEach","countNodes","startIndex","insertNodeIntoTemplate","refNode","appendChild","insertCount","walkerIndex","directives","WeakMap","isDirective","o","noChange","nothing","TemplateInstance","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","policy","trustedTypes","createPolicy","createHTML","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","value","getHTML","innerHTML","isPrimitive","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","v","text","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","call","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","render","firstChild","Object","assign","appendInto","DefaultTemplateProcessor","prefix","defaultTemplateProcessor","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","removeStylesFromLitTemplates","templates","styles","Set","from","querySelectorAll","add","shadyRenderSet","prepareTemplateStyles","renderedDOM","templateElement","condensedStyle","style","textContent","querySelector","nativeShadow","removes","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","litRender","delete","styleElement","_a","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","finalized","UpdatingElement","HTMLElement","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","descriptor","getPropertyDescriptor","defineProperty","oldValue","requestUpdateInternal","configurable","enumerable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_updateState","_updatePromise","Promise","res","_enableUpdatingResolver","_changedProperties","_saveInstanceProperties","constructor","_v","_instanceProperties","enableUpdating","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","getPropertyOptions","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_reflectingProperties","_hasRequestedUpdate","_enqueueUpdate","updateComplete","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","unsafeCSS","renderNotImplemented","LitElement","userStyles","getStyles","addStyles","reduceRight","unshift","_styles","map","cssRules","reduce","css","rule","_getUniqueStyles","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","templateResult","BaseElement","styleInject","insertAt","head","getElementsByTagName","CopyCode","onCopy","bind","copyButton","className","tooltip","append","prepend","getSelection","removeAllRanges","range","createRange","selectNode","addRange","execCommand","define","expandSideNav","store","action","body","classList","main","header","inert","isSideNavExpanded","collapseSideNav","remove","checkIfUserAcceptsCookies","localStorage","getItem","userAcceptsCookies","showingSnackbar","snackbarType","setUserAcceptsCookies","setItem","Header","onStateChanged","hamburgerBtn","subscribe","unsubscribe","isSearchExpanded","currentUrl","toggle","replace","active","focus","_createClass","defineProperties","target","writable","Constructor","protoProps","staticProps","_classCallCheck","TypeError","matches","Element","msMatchesSelector","_focusableElementsString","InertRoot","rootElement","inertManager","_inertManager","_rootElement","_managedNodes","hasAttribute","_savedAriaHidden","_makeSubtreeUnfocusable","_observer","MutationObserver","_onMutation","observe","childList","subtree","disconnect","inertNode","_unmanageNode","_this2","composedTreeWalk","_visitNode","activeElement","contains","root","DOCUMENT_FRAGMENT_NODE","blur","ELEMENT_NODE","_adoptInertRoot","_manageNode","register","deregister","_this3","inertSubroot","getInertRoot","setInert","managedNodes","savedInertNode","records","self","record","addedNodes","removedNodes","_unmanageSubtree","attributeName","managedNode","ariaHidden","InertNode","inertRoot","_node","_overrodeFocusMethod","_inertRoots","_savedTabIndex","_destroyed","ensureUntabbable","_throwIfDestroyed","destroyed","tabIndex","hasSavedTabIndex","destructor","InertManager","_document","_watchForInert","addInertStyle","documentElement","readyState","_onDocumentLoaded","addInertRoot","removeInertRoot","inertElement","_this","inertElements","callback","shadowRootAncestor","shadowRoot","distributedNodes","getDistributedNodes","slot","_distributedNodes","assignedNodes","flatten","_i","child","SideNav","animatable","expanded","expanded_","startX_","currentX_","touchingSideNav_","prerenderedChildren_","onCloseSideNav","onTouchStart","onTouchMove","onTouchEnd","onTransitionEnd","drag","onKeyUp","children","onBlockClicks","sideNavContainerEl","addEventListeners","getState","touches","pageX","requestAnimationFrame","translateX","min","transform","closest","stopPropagation","manageFocus","val","oldVal","requestUpdate","disconnectedCallback","applyFocusVisiblePolyfill","scope","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesAllowlist","search","url","tel","email","password","number","date","month","week","time","datetime","datetime-local","isValidFocusTarget","el","addFocusVisibleClass","onPointerDown","addInitialPointerMoveListeners","onInitialPointerMove","metaKey","altKey","ctrlKey","visibilityState","readOnly","isContentEditable","clearTimeout","setTimeout","DOCUMENT_NODE","CustomEvent","error","createEvent","initCustomEvent","dispatchEvent","factory","onGlobalStateChanged","isSignedIn","isPageLoading","hidden"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        let value = this.getHTML();\n        if (policy !== undefined) {\n            // this is secure because `this.strings` is a TemplateStringsArray.\n            // TODO: validate this when\n            // https://github.com/tc39/proposal-array-is-template-object is\n            // implemented.\n            value = policy.createHTML(value);\n        }\n        template.innerHTML = value;\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        const parts = this.parts;\n        // If we're assigning an attribute via syntax like:\n        //    attr=\"${foo}\"  or  attr=${foo}\n        // but not\n        //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n        // then we don't want to coerce the attribute value into one long\n        // string. Instead we want to just return the value itself directly,\n        // so that sanitizeDOMValue can get the actual value rather than\n        // String(value)\n        // The exception is if v is an array, in which case we do want to smash\n        // it together into a string without calling String() on the array.\n        //\n        // This also allows trusted values (when using TrustedTypes) being\n        // assigned to DOM sinks without being stringified in the process.\n        if (l === 1 && strings[0] === '' && strings[1] === '') {\n            const v = parts[0].value;\n            if (typeof v === 'symbol') {\n                return String(v);\n            }\n            if (typeof v === 'string' || !isIterable(v)) {\n                return v;\n            }\n        }\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.3.0');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nexport const shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * Use this module if you want to create your own base class extending\n * [[UpdatingElement]].\n * @packageDocumentation\n */\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a PropertyDeclaration for the property with the given options.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it's important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     *\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        const descriptor = this.getPropertyDescriptor(name, key, options);\n        if (descriptor !== undefined) {\n            Object.defineProperty(this.prototype, name, descriptor);\n        }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     *   class MyElement extends LitElement {\n     *     static getPropertyDescriptor(name, key, options) {\n     *       const defaultDescriptor =\n     *           super.getPropertyDescriptor(name, key, options);\n     *       const setter = defaultDescriptor.set;\n     *       return {\n     *         get: defaultDescriptor.get,\n     *         set(value) {\n     *           setter.call(this, value);\n     *           // custom action.\n     *         },\n     *         configurable: true,\n     *         enumerable: true\n     *       }\n     *     }\n     *   }\n     *\n     * @nocollapse\n     */\n    static getPropertyDescriptor(name, key, options) {\n        return {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this\n                    .requestUpdateInternal(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true\n        };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a PropertyDeclaration via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered \"final\" and not overridden. To\n     * customize the options for a given property, override `createProperty`.\n     *\n     * @nocollapse\n     * @final\n     */\n    static getPropertyOptions(name) {\n        return this._classProperties && this._classProperties.get(name) ||\n            defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._updateState = 0;\n        this._updatePromise =\n            new Promise((res) => this._enableUpdatingResolver = res);\n        this._changedProperties = new Map();\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this.requestUpdateInternal();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection.\n        this.enableUpdating();\n    }\n    enableUpdating() {\n        if (this._enableUpdatingResolver !== undefined) {\n            this._enableUpdatingResolver();\n            this._enableUpdatingResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        // Note, hint this as an `AttributeMap` so closure clearly understands\n        // the type; it has issues with tracking types through statics\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor.getPropertyOptions(propName);\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This protected version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    requestUpdateInternal(name, oldValue, options) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            options = options || ctor.getPropertyOptions(name);\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._updatePromise = this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this.requestUpdateInternal(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await this._updatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        const result = this.performUpdate();\n        // If `performUpdate` returns a Promise, we await it. This is done to\n        // enable coordinating updates with a scheduler. Note, the result is\n        // checked to avoid delaying an additional microtask unless we need to.\n        if (result != null) {\n            await result;\n        }\n        return !this._hasRequestedUpdate;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Abort any update if one is not pending when this is called.\n        // This can happen if `performUpdate` is called early to \"flush\"\n        // the update.\n        if (!this._hasRequestedUpdate) {\n            return;\n        }\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n            else {\n                this._markUpdated();\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n            throw e;\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n        this._markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = (window.ShadowRoot) &&\n    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `supportsAdoptingStyleSheets` is true then we assume\n            // CSSStyleSheet is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * The main LitElement module, which defines the [[`LitElement`]] base class and\n * related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import [[`LitElement`]] and [[`html`]] from this module to create a\n * component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends [[`UpdatingElement`]] and adds lit-html templating.\n * The `UpdatingElement` class is provided for users that want to build\n * their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets, unsafeCSS } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.4.0');\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the [[`properties`]] property or the [[`property`]] decorator.\n */\nexport class LitElement extends UpdatingElement {\n    /**\n     * Return the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * @nocollapse\n     */\n    static getStyles() {\n        return this.styles;\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Only gather styles once per class\n        if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n            return;\n        }\n        // Take care not to call `this.getStyles()` multiple times since this\n        // generates new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.getStyles();\n        if (Array.isArray(userStyles)) {\n            // De-duplicate styles preserving the _last_ instance in the set.\n            // This is a performance optimization to avoid duplicated styles that can\n            // occur especially when composing via subclassing.\n            // The last item is kept to try to preserve the cascade order with the\n            // assumption that it's most important that last added styles override\n            // previous styles.\n            const addStyles = (styles, set) => styles.reduceRight((set, s) => \n            // Note: On IE set.add() does not return the set\n            Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);\n            // Array.from does not work on Set in IE, otherwise return\n            // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n            const set = addStyles(userStyles, new Set());\n            const styles = [];\n            set.forEach((v) => styles.unshift(v));\n            this._styles = styles;\n        }\n        else {\n            this._styles = userStyles === undefined ? [] : [userStyles];\n        }\n        // Ensure that there are no invalid CSSStyleSheet instances here. They are\n        // invalid in two conditions.\n        // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but\n        //     this is impossible to check except via .replaceSync or use\n        // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is\n        //     false)\n        this._styles = this._styles.map((s) => {\n            if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {\n                // Flatten the cssText from the passed constructible stylesheet (or\n                // undetectable non-constructible stylesheet). The user might have\n                // expected to update their stylesheets over time, but the alternative\n                // is a crash.\n                const cssText = Array.prototype.slice.call(s.cssRules)\n                    .reduce((css, rule) => css + rule.cssText, '');\n                return unsafeCSS(cssText);\n            }\n            return s;\n        });\n    }\n    /**\n     * Performs element initialization. By default this calls\n     * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and\n     * captures any pre-set values for registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.constructor._getUniqueStyles();\n        this.renderRoot = this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the [[`styles`]]\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        // Setting properties in `render` should not trigger an update. Since\n        // updates are allowed after super.update, it's important to call `render`\n        // before that.\n        const templateResult = this.render();\n        super.update(changedProperties);\n        // If render is not implemented by the component, don't call lit-html render\n        if (templateResult !== renderNotImplemented) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method may return\n     * any value renderable by lit-html's `NodePart` - typically a\n     * `TemplateResult`. Setting properties inside this method will *not* trigger\n     * the element to update.\n     */\n    render() {\n        return renderNotImplemented;\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Reference to the underlying library method used to render the element's\n * DOM. By default, points to the `render` method from lit-html's shady-render\n * module.\n *\n * **Most users will never need to touch this property.**\n *\n * This  property should not be confused with the `render` instance method,\n * which should be overridden to define a template for the element.\n *\n * Advanced users creating a new base class based on LitElement can override\n * this property to point to a custom render method with a signature that\n * matches [shady-render's `render`\n * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).\n *\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import {LitElement} from \"lit-element\";\n\nexport class BaseElement extends LitElement {\n    constructor() {\n        super();\n    }\n\n    createRenderRoot() {\n        // Diable shadow DOM.\n        // Instead templates will be rendered in the light DOM.\n        return this;\n    }\n}","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/**\n * @fileoverview Element that renders copyable code.\n */\n\nimport {BaseElement} from \"../BaseElement\";\nimport \"./_styles.scss\";\n\n/**\n * Renders code block that can easily be copied.\n *\n * @extends {BaseElement}\n * @final\n */\nclass CopyCode extends BaseElement {\n  constructor() {\n    super();\n    this.onCopy = this.onCopy.bind(this);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    if (!this.copyButton) {\n      this.copyButton = document.createElement(\"button\");\n      this.copyButton.className =\n        \"w-button--icon w-button--round web-copy-code__button\";\n      this.copyButton.setAttribute(\"data-icon\", \"file_copy\");\n      // Set aria-label because title isn't accessible to sighted keyboard users\n      // and the tooltip is only visible on focus,\n      // which means it isn't read reliably by screen readers.\n      this.copyButton.setAttribute(\"aria-label\", \"Copy code\");\n      this.copyButton.addEventListener(\"click\", this.onCopy);\n\n      this.tooltip = document.createElement(\"span\");\n      this.tooltip.className = \"w-tooltip w-tooltip--right\";\n      this.tooltip.setAttribute(\"role\", \"tooltip\");\n      this.tooltip.textContent = \"Copy code\";\n      this.copyButton.append(this.tooltip);\n\n      this.prepend(this.copyButton);\n    }\n  }\n\n  onCopy() {\n    window.getSelection().removeAllRanges();\n    const range = document.createRange();\n    range.selectNode(this.querySelector(\"code\"));\n    window.getSelection().addRange(range);\n    document.execCommand(\"copy\");\n    window.getSelection().removeAllRanges();\n  }\n}\n\ncustomElements.define(\"web-copy-code\", CopyCode);\n","import {store} from \"./store\";\n\nexport const expandSideNav = store.action(() => {\n    document.body.classList.add(\"web-side-nav--expanded\");\n    const main = document.querySelector(\"main\");\n    const header = document.querySelector(\"web-header\");\n    main.inert = true;\n    header.inert = true;\n    return {isSideNavExpanded: true};\n  });\n  \n  export const collapseSideNav = store.action(() => {\n    document.body.classList.remove(\"web-side-nav--expanded\");\n    const main = document.querySelector(\"main\");\n    const header = document.querySelector(\"web-header\");\n    main.inert = false;\n    header.inert = false;\n    return {isSideNavExpanded: false};\n  });\n\nexport const checkIfUserAcceptsCookies = store.action(() => {\n    if (localStorage.getItem(\"web-accepts-cookies\")) {\n        return {\n            userAcceptsCookies: true,\n        };\n    }\n\n    return {showingSnackbar: true, snackbarType: \"cookies\"};\n});\n\nexport const setUserAcceptsCookies = store.action(() => {\n    localStorage.setItem(\"web-accepts-cookies\", 1);\n    return {\n        userAcceptsCookies: true,\n        showingSnackbar: false,\n        // Note we don't set the snackbarType to null because that would cause the\n        // snackbar to re-render and break the animation.\n        // Instead, snackbarType is allowed to stick around and future updates can\n        // overwrite it.\n    };\n});","/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview A responsive header that can trigger a side-nav.\n * \n * This does not inherit from BaseStateElement as it is not a LitElement.\n */\n\nimport {store} from \"../../store\";\nimport {expandSideNav} from \"../../actions\";\n\nclass Header extends HTMLElement {\n    constructor() {\n        super();\n\n        this.onStateChanged = this.onStateChanged.bind(this);\n    }\n\n    // When Header added to DOM activate hamburgerBtn and add click event listener\n    connectedCallback() {\n        this.hamburgerBtn = this.querySelector(\".web-header__hamburger-btn\");\n        this.hamburgerBtn.classList.remove(\"unresolved\");\n        this.hamburgerBtn.addEventListener(\"click\", expandSideNav);\n\n        store.subscribe(this.onStateChanged);\n    }\n\n    // When Header removed from DOM remove click event listener\n    disconnectedCallBack() {\n        this.hamburgerBtn.removeEventListener(\"click\", expandSideNav);\n\n        store.unsubscribe(this.onStateChanged);\n    }\n\n    onStateChanged({isSearchExpanded, currentUrl}) {\n        this.classList.toggle(\"web-header--has-expanded-search\", isSearchExpanded);\n\n        // Ensure that the \"active\" attribute is applied to any matching header\n        // link, or to none (for random subpages or articles).\n        currentUrl = currentUrl.replace(/\"/g, '\\\\\"');\n        currentUrl = (currentUrl.match(/^\\/\\w+\\//) || [\"\"])[0];\n\n        const active = this.querySelector(\"[active]\");\n        const updated = this.querySelector(`[href=\"${currentUrl}\"]`);\n\n        if (active === updated) {\n            return;\n        }\n\n        if (active) {\n            active.removeAttribute(\"active\");\n            active.removeAttribute(\"aria-current\");\n        }\n\n        if (updated) {\n            updated.setAttribute(\"active\", \"\");\n            updated.setAttribute(\"aria-current\", \"page\");\n        }\n    }\n\n    /**\n     * This is called bt the SideNav to return focus to this control when the\n     * use closes the SideNav.\n     * THis is important for accessibility.\n     */\n    manageFocus() {\n        this.hamburgerBtn.focus();\n    }\n}\n\ncustomElements.define(\"web-header\", Header);\n\n ","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * This work is licensed under the W3C Software and Document License\n * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).\n */\n\n(function () {\n  // Return early if we're not running inside of the browser.\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  // Convenience function for converting NodeLists.\n  /** @type {typeof Array.prototype.slice} */\n  var slice = Array.prototype.slice;\n\n  /**\n   * IE has a non-standard name for \"matches\".\n   * @type {typeof Element.prototype.matches}\n   */\n  var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\n\n  /** @type {string} */\n  var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');\n\n  /**\n   * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`\n   * attribute.\n   *\n   * Its main functions are:\n   *\n   * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the\n   *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering\n   *   each focusable node in the subtree with the singleton `InertManager` which manages all known\n   *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`\n   *   instance exists for each focusable node which has at least one inert root as an ancestor.\n   *\n   * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`\n   *   attribute is removed from the root node). This is handled in the destructor, which calls the\n   *   `deregister` method on `InertManager` for each managed inert node.\n   */\n\n  var InertRoot = function () {\n    /**\n     * @param {!Element} rootElement The Element at the root of the inert subtree.\n     * @param {!InertManager} inertManager The global singleton InertManager object.\n     */\n    function InertRoot(rootElement, inertManager) {\n      _classCallCheck(this, InertRoot);\n\n      /** @type {!InertManager} */\n      this._inertManager = inertManager;\n\n      /** @type {!Element} */\n      this._rootElement = rootElement;\n\n      /**\n       * @type {!Set<!InertNode>}\n       * All managed focusable nodes in this InertRoot's subtree.\n       */\n      this._managedNodes = new Set();\n\n      // Make the subtree hidden from assistive technology\n      if (this._rootElement.hasAttribute('aria-hidden')) {\n        /** @type {?string} */\n        this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');\n      } else {\n        this._savedAriaHidden = null;\n      }\n      this._rootElement.setAttribute('aria-hidden', 'true');\n\n      // Make all focusable elements in the subtree unfocusable and add them to _managedNodes\n      this._makeSubtreeUnfocusable(this._rootElement);\n\n      // Watch for:\n      // - any additions in the subtree: make them unfocusable too\n      // - any removals from the subtree: remove them from this inert root's managed nodes\n      // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable\n      //   element, make that node a managed node.\n      this._observer = new MutationObserver(this._onMutation.bind(this));\n      this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.  This unwinds all of the state\n     * stored in this object and updates the state of all of the managed nodes.\n     */\n\n\n    _createClass(InertRoot, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._observer.disconnect();\n\n        if (this._rootElement) {\n          if (this._savedAriaHidden !== null) {\n            this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);\n          } else {\n            this._rootElement.removeAttribute('aria-hidden');\n          }\n        }\n\n        this._managedNodes.forEach(function (inertNode) {\n          this._unmanageNode(inertNode.node);\n        }, this);\n\n        // Note we cast the nulls to the ANY type here because:\n        // 1) We want the class properties to be declared as non-null, or else we\n        //    need even more casts throughout this code. All bets are off if an\n        //    instance has been destroyed and a method is called.\n        // 2) We don't want to cast \"this\", because we want type-aware optimizations\n        //    to know which properties we're setting.\n        this._observer = /** @type {?} */null;\n        this._rootElement = /** @type {?} */null;\n        this._managedNodes = /** @type {?} */null;\n        this._inertManager = /** @type {?} */null;\n      }\n\n      /**\n       * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.\n       */\n\n    }, {\n      key: '_makeSubtreeUnfocusable',\n\n\n      /**\n       * @param {!Node} startNode\n       */\n      value: function _makeSubtreeUnfocusable(startNode) {\n        var _this2 = this;\n\n        composedTreeWalk(startNode, function (node) {\n          return _this2._visitNode(node);\n        });\n\n        var activeElement = document.activeElement;\n\n        if (!document.body.contains(startNode)) {\n          // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.\n          var node = startNode;\n          /** @type {!ShadowRoot|undefined} */\n          var root = undefined;\n          while (node) {\n            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n              root = /** @type {!ShadowRoot} */node;\n              break;\n            }\n            node = node.parentNode;\n          }\n          if (root) {\n            activeElement = root.activeElement;\n          }\n        }\n        if (startNode.contains(activeElement)) {\n          activeElement.blur();\n          // In IE11, if an element is already focused, and then set to tabindex=-1\n          // calling blur() will not actually move the focus.\n          // To work around this we call focus() on the body instead.\n          if (activeElement === document.activeElement) {\n            document.body.focus();\n          }\n        }\n      }\n\n      /**\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_visitNode',\n      value: function _visitNode(node) {\n        if (node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n        var element = /** @type {!Element} */node;\n\n        // If a descendant inert root becomes un-inert, its descendants will still be inert because of\n        // this inert root, so all of its managed nodes need to be adopted by this InertRoot.\n        if (element !== this._rootElement && element.hasAttribute('inert')) {\n          this._adoptInertRoot(element);\n        }\n\n        if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {\n          this._manageNode(element);\n        }\n      }\n\n      /**\n       * Register the given node with this InertRoot and with InertManager.\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_manageNode',\n      value: function _manageNode(node) {\n        var inertNode = this._inertManager.register(node, this);\n        this._managedNodes.add(inertNode);\n      }\n\n      /**\n       * Unregister the given node with this InertRoot and with InertManager.\n       * @param {!Node} node\n       */\n\n    }, {\n      key: '_unmanageNode',\n      value: function _unmanageNode(node) {\n        var inertNode = this._inertManager.deregister(node, this);\n        if (inertNode) {\n          this._managedNodes['delete'](inertNode);\n        }\n      }\n\n      /**\n       * Unregister the entire subtree starting at `startNode`.\n       * @param {!Node} startNode\n       */\n\n    }, {\n      key: '_unmanageSubtree',\n      value: function _unmanageSubtree(startNode) {\n        var _this3 = this;\n\n        composedTreeWalk(startNode, function (node) {\n          return _this3._unmanageNode(node);\n        });\n      }\n\n      /**\n       * If a descendant node is found with an `inert` attribute, adopt its managed nodes.\n       * @param {!Element} node\n       */\n\n    }, {\n      key: '_adoptInertRoot',\n      value: function _adoptInertRoot(node) {\n        var inertSubroot = this._inertManager.getInertRoot(node);\n\n        // During initialisation this inert root may not have been registered yet,\n        // so register it now if need be.\n        if (!inertSubroot) {\n          this._inertManager.setInert(node, true);\n          inertSubroot = this._inertManager.getInertRoot(node);\n        }\n\n        inertSubroot.managedNodes.forEach(function (savedInertNode) {\n          this._manageNode(savedInertNode.node);\n        }, this);\n      }\n\n      /**\n       * Callback used when mutation observer detects subtree additions, removals, or attribute changes.\n       * @param {!Array<!MutationRecord>} records\n       * @param {!MutationObserver} self\n       */\n\n    }, {\n      key: '_onMutation',\n      value: function _onMutation(records, self) {\n        records.forEach(function (record) {\n          var target = /** @type {!Element} */record.target;\n          if (record.type === 'childList') {\n            // Manage added nodes\n            slice.call(record.addedNodes).forEach(function (node) {\n              this._makeSubtreeUnfocusable(node);\n            }, this);\n\n            // Un-manage removed nodes\n            slice.call(record.removedNodes).forEach(function (node) {\n              this._unmanageSubtree(node);\n            }, this);\n          } else if (record.type === 'attributes') {\n            if (record.attributeName === 'tabindex') {\n              // Re-initialise inert node if tabindex changes\n              this._manageNode(target);\n            } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {\n              // If a new inert root is added, adopt its managed nodes and make sure it knows about the\n              // already managed nodes from this inert subroot.\n              this._adoptInertRoot(target);\n              var inertSubroot = this._inertManager.getInertRoot(target);\n              this._managedNodes.forEach(function (managedNode) {\n                if (target.contains(managedNode.node)) {\n                  inertSubroot._manageNode(managedNode.node);\n                }\n              });\n            }\n          }\n        }, this);\n      }\n    }, {\n      key: 'managedNodes',\n      get: function get() {\n        return new Set(this._managedNodes);\n      }\n\n      /** @return {boolean} */\n\n    }, {\n      key: 'hasSavedAriaHidden',\n      get: function get() {\n        return this._savedAriaHidden !== null;\n      }\n\n      /** @param {?string} ariaHidden */\n\n    }, {\n      key: 'savedAriaHidden',\n      set: function set(ariaHidden) {\n        this._savedAriaHidden = ariaHidden;\n      }\n\n      /** @return {?string} */\n      ,\n      get: function get() {\n        return this._savedAriaHidden;\n      }\n    }]);\n\n    return InertRoot;\n  }();\n\n  /**\n   * `InertNode` initialises and manages a single inert node.\n   * A node is inert if it is a descendant of one or more inert root elements.\n   *\n   * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and\n   * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element\n   * is intrinsically focusable or not.\n   *\n   * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an\n   * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the\n   * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s\n   * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,\n   * or removes the `tabindex` attribute if the element is intrinsically focusable.\n   */\n\n\n  var InertNode = function () {\n    /**\n     * @param {!Node} node A focusable element to be made inert.\n     * @param {!InertRoot} inertRoot The inert root element associated with this inert node.\n     */\n    function InertNode(node, inertRoot) {\n      _classCallCheck(this, InertNode);\n\n      /** @type {!Node} */\n      this._node = node;\n\n      /** @type {boolean} */\n      this._overrodeFocusMethod = false;\n\n      /**\n       * @type {!Set<!InertRoot>} The set of descendant inert roots.\n       *    If and only if this set becomes empty, this node is no longer inert.\n       */\n      this._inertRoots = new Set([inertRoot]);\n\n      /** @type {?number} */\n      this._savedTabIndex = null;\n\n      /** @type {boolean} */\n      this._destroyed = false;\n\n      // Save any prior tabindex info and make this node untabbable\n      this.ensureUntabbable();\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.\n     * This makes the managed node focusable again and deletes all of the previously stored state.\n     */\n\n\n    _createClass(InertNode, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._throwIfDestroyed();\n\n        if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {\n          var element = /** @type {!Element} */this._node;\n          if (this._savedTabIndex !== null) {\n            element.setAttribute('tabindex', this._savedTabIndex);\n          } else {\n            element.removeAttribute('tabindex');\n          }\n\n          // Use `delete` to restore native focus method.\n          if (this._overrodeFocusMethod) {\n            delete element.focus;\n          }\n        }\n\n        // See note in InertRoot.destructor for why we cast these nulls to ANY.\n        this._node = /** @type {?} */null;\n        this._inertRoots = /** @type {?} */null;\n        this._destroyed = true;\n      }\n\n      /**\n       * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.\n       * If the object has been destroyed, any attempt to access it will cause an exception.\n       */\n\n    }, {\n      key: '_throwIfDestroyed',\n\n\n      /**\n       * Throw if user tries to access destroyed InertNode.\n       */\n      value: function _throwIfDestroyed() {\n        if (this.destroyed) {\n          throw new Error('Trying to access destroyed InertNode');\n        }\n      }\n\n      /** @return {boolean} */\n\n    }, {\n      key: 'ensureUntabbable',\n\n\n      /** Save the existing tabindex value and make the node untabbable and unfocusable */\n      value: function ensureUntabbable() {\n        if (this.node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n        var element = /** @type {!Element} */this.node;\n        if (matches.call(element, _focusableElementsString)) {\n          if ( /** @type {!HTMLElement} */element.tabIndex === -1 && this.hasSavedTabIndex) {\n            return;\n          }\n\n          if (element.hasAttribute('tabindex')) {\n            this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n          }\n          element.setAttribute('tabindex', '-1');\n          if (element.nodeType === Node.ELEMENT_NODE) {\n            element.focus = function () {};\n            this._overrodeFocusMethod = true;\n          }\n        } else if (element.hasAttribute('tabindex')) {\n          this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n          element.removeAttribute('tabindex');\n        }\n      }\n\n      /**\n       * Add another inert root to this inert node's set of managing inert roots.\n       * @param {!InertRoot} inertRoot\n       */\n\n    }, {\n      key: 'addInertRoot',\n      value: function addInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots.add(inertRoot);\n      }\n\n      /**\n       * Remove the given inert root from this inert node's set of managing inert roots.\n       * If the set of managing inert roots becomes empty, this node is no longer inert,\n       * so the object should be destroyed.\n       * @param {!InertRoot} inertRoot\n       */\n\n    }, {\n      key: 'removeInertRoot',\n      value: function removeInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots['delete'](inertRoot);\n        if (this._inertRoots.size === 0) {\n          this.destructor();\n        }\n      }\n    }, {\n      key: 'destroyed',\n      get: function get() {\n        return (/** @type {!InertNode} */this._destroyed\n        );\n      }\n    }, {\n      key: 'hasSavedTabIndex',\n      get: function get() {\n        return this._savedTabIndex !== null;\n      }\n\n      /** @return {!Node} */\n\n    }, {\n      key: 'node',\n      get: function get() {\n        this._throwIfDestroyed();\n        return this._node;\n      }\n\n      /** @param {?number} tabIndex */\n\n    }, {\n      key: 'savedTabIndex',\n      set: function set(tabIndex) {\n        this._throwIfDestroyed();\n        this._savedTabIndex = tabIndex;\n      }\n\n      /** @return {?number} */\n      ,\n      get: function get() {\n        this._throwIfDestroyed();\n        return this._savedTabIndex;\n      }\n    }]);\n\n    return InertNode;\n  }();\n\n  /**\n   * InertManager is a per-document singleton object which manages all inert roots and nodes.\n   *\n   * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`\n   * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.\n   * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant\n   * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance\n   * is created for each such node, via the `_managedNodes` map.\n   */\n\n\n  var InertManager = function () {\n    /**\n     * @param {!Document} document\n     */\n    function InertManager(document) {\n      _classCallCheck(this, InertManager);\n\n      if (!document) {\n        throw new Error('Missing required argument; InertManager needs to wrap a document.');\n      }\n\n      /** @type {!Document} */\n      this._document = document;\n\n      /**\n       * All managed nodes known to this InertManager. In a map to allow looking up by Node.\n       * @type {!Map<!Node, !InertNode>}\n       */\n      this._managedNodes = new Map();\n\n      /**\n       * All inert roots known to this InertManager. In a map to allow looking up by Node.\n       * @type {!Map<!Node, !InertRoot>}\n       */\n      this._inertRoots = new Map();\n\n      /**\n       * Observer for mutations on `document.body`.\n       * @type {!MutationObserver}\n       */\n      this._observer = new MutationObserver(this._watchForInert.bind(this));\n\n      // Add inert style.\n      addInertStyle(document.head || document.body || document.documentElement);\n\n      // Wait for document to be loaded.\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));\n      } else {\n        this._onDocumentLoaded();\n      }\n    }\n\n    /**\n     * Set whether the given element should be an inert root or not.\n     * @param {!Element} root\n     * @param {boolean} inert\n     */\n\n\n    _createClass(InertManager, [{\n      key: 'setInert',\n      value: function setInert(root, inert) {\n        if (inert) {\n          if (this._inertRoots.has(root)) {\n            // element is already inert\n            return;\n          }\n\n          var inertRoot = new InertRoot(root, this);\n          root.setAttribute('inert', '');\n          this._inertRoots.set(root, inertRoot);\n          // If not contained in the document, it must be in a shadowRoot.\n          // Ensure inert styles are added there.\n          if (!this._document.body.contains(root)) {\n            var parent = root.parentNode;\n            while (parent) {\n              if (parent.nodeType === 11) {\n                addInertStyle(parent);\n              }\n              parent = parent.parentNode;\n            }\n          }\n        } else {\n          if (!this._inertRoots.has(root)) {\n            // element is already non-inert\n            return;\n          }\n\n          var _inertRoot = this._inertRoots.get(root);\n          _inertRoot.destructor();\n          this._inertRoots['delete'](root);\n          root.removeAttribute('inert');\n        }\n      }\n\n      /**\n       * Get the InertRoot object corresponding to the given inert root element, if any.\n       * @param {!Node} element\n       * @return {!InertRoot|undefined}\n       */\n\n    }, {\n      key: 'getInertRoot',\n      value: function getInertRoot(element) {\n        return this._inertRoots.get(element);\n      }\n\n      /**\n       * Register the given InertRoot as managing the given node.\n       * In the case where the node has a previously existing inert root, this inert root will\n       * be added to its set of inert roots.\n       * @param {!Node} node\n       * @param {!InertRoot} inertRoot\n       * @return {!InertNode} inertNode\n       */\n\n    }, {\n      key: 'register',\n      value: function register(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (inertNode !== undefined) {\n          // node was already in an inert subtree\n          inertNode.addInertRoot(inertRoot);\n        } else {\n          inertNode = new InertNode(node, inertRoot);\n        }\n\n        this._managedNodes.set(node, inertNode);\n\n        return inertNode;\n      }\n\n      /**\n       * De-register the given InertRoot as managing the given inert node.\n       * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert\n       * node from the InertManager's set of managed nodes if it is destroyed.\n       * If the node is not currently managed, this is essentially a no-op.\n       * @param {!Node} node\n       * @param {!InertRoot} inertRoot\n       * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.\n       */\n\n    }, {\n      key: 'deregister',\n      value: function deregister(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (!inertNode) {\n          return null;\n        }\n\n        inertNode.removeInertRoot(inertRoot);\n        if (inertNode.destroyed) {\n          this._managedNodes['delete'](node);\n        }\n\n        return inertNode;\n      }\n\n      /**\n       * Callback used when document has finished loading.\n       */\n\n    }, {\n      key: '_onDocumentLoaded',\n      value: function _onDocumentLoaded() {\n        // Find all inert roots in document and make them actually inert.\n        var inertElements = slice.call(this._document.querySelectorAll('[inert]'));\n        inertElements.forEach(function (inertElement) {\n          this.setInert(inertElement, true);\n        }, this);\n\n        // Comment this out to use programmatic API only.\n        this._observer.observe(this._document.body || this._document.documentElement, { attributes: true, subtree: true, childList: true });\n      }\n\n      /**\n       * Callback used when mutation observer detects attribute changes.\n       * @param {!Array<!MutationRecord>} records\n       * @param {!MutationObserver} self\n       */\n\n    }, {\n      key: '_watchForInert',\n      value: function _watchForInert(records, self) {\n        var _this = this;\n        records.forEach(function (record) {\n          switch (record.type) {\n            case 'childList':\n              slice.call(record.addedNodes).forEach(function (node) {\n                if (node.nodeType !== Node.ELEMENT_NODE) {\n                  return;\n                }\n                var inertElements = slice.call(node.querySelectorAll('[inert]'));\n                if (matches.call(node, '[inert]')) {\n                  inertElements.unshift(node);\n                }\n                inertElements.forEach(function (inertElement) {\n                  this.setInert(inertElement, true);\n                }, _this);\n              }, _this);\n              break;\n            case 'attributes':\n              if (record.attributeName !== 'inert') {\n                return;\n              }\n              var target = /** @type {!Element} */record.target;\n              var inert = target.hasAttribute('inert');\n              _this.setInert(target, inert);\n              break;\n          }\n        }, this);\n      }\n    }]);\n\n    return InertManager;\n  }();\n\n  /**\n   * Recursively walk the composed tree from |node|.\n   * @param {!Node} node\n   * @param {(function (!Element))=} callback Callback to be called for each element traversed,\n   *     before descending into child nodes.\n   * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.\n   */\n\n\n  function composedTreeWalk(node, callback, shadowRootAncestor) {\n    if (node.nodeType == Node.ELEMENT_NODE) {\n      var element = /** @type {!Element} */node;\n      if (callback) {\n        callback(element);\n      }\n\n      // Descend into node:\n      // If it has a ShadowRoot, ignore all child elements - these will be picked\n      // up by the <content> or <shadow> elements. Descend straight into the\n      // ShadowRoot.\n      var shadowRoot = /** @type {!HTMLElement} */element.shadowRoot;\n      if (shadowRoot) {\n        composedTreeWalk(shadowRoot, callback, shadowRoot);\n        return;\n      }\n\n      // If it is a <content> element, descend into distributed elements - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'content') {\n        var content = /** @type {!HTMLContentElement} */element;\n        // Verifies if ShadowDom v0 is supported.\n        var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];\n        for (var i = 0; i < distributedNodes.length; i++) {\n          composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n\n      // If it is a <slot> element, descend into assigned nodes - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'slot') {\n        var slot = /** @type {!HTMLSlotElement} */element;\n        // Verify if ShadowDom v1 is supported.\n        var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({ flatten: true }) : [];\n        for (var _i = 0; _i < _distributedNodes.length; _i++) {\n          composedTreeWalk(_distributedNodes[_i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n    }\n\n    // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>\n    // element, nor a <shadow> element recurse normally.\n    var child = node.firstChild;\n    while (child != null) {\n      composedTreeWalk(child, callback, shadowRootAncestor);\n      child = child.nextSibling;\n    }\n  }\n\n  /**\n   * Adds a style element to the node containing the inert specific styles\n   * @param {!Node} node\n   */\n  function addInertStyle(node) {\n    if (node.querySelector('style#inert-style, link#inert-style')) {\n      return;\n    }\n    var style = document.createElement('style');\n    style.setAttribute('id', 'inert-style');\n    style.textContent = '\\n' + '[inert] {\\n' + '  pointer-events: none;\\n' + '  cursor: default;\\n' + '}\\n' + '\\n' + '[inert], [inert] * {\\n' + '  -webkit-user-select: none;\\n' + '  -moz-user-select: none;\\n' + '  -ms-user-select: none;\\n' + '  user-select: none;\\n' + '}\\n';\n    node.appendChild(style);\n  }\n\n  /** @type {!InertManager} */\n  var inertManager = new InertManager(document);\n\n  if (!Element.prototype.hasOwnProperty('inert')) {\n    Object.defineProperty(Element.prototype, 'inert', {\n      enumerable: true,\n      /** @this {!Element} */\n      get: function get() {\n        return this.hasAttribute('inert');\n      },\n      /** @this {!Element} */\n      set: function set(inert) {\n        inertManager.setInert(this, inert);\n      }\n    });\n  }\n})();\n","/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {html} from \"lit-element\";\nimport {BaseElement} from \"../BaseElement\";\nimport {store} from \"../../store\";\nimport \"wicg-inert\";\nimport {collapseSideNav} from \"../../actions\";\nimport \"./_styles.scss\";\n\nclass SideNav extends BaseElement {\n  static get properties() {\n    return {\n      animatable: {type: Boolean, reflect: true},\n      expanded: {type: Boolean, reflect: true},\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.inert = true;\n    this.animatable = false;\n    this.expanded_ = false;\n    this.startX_ = 0;\n    this.currentX_ = 0;\n    this.touchingSideNav_ = false;\n    this.prerenderedChildren_ = null;\n\n    this.onCloseSideNav = this.onCloseSideNav.bind(this);\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchMove = this.onTouchMove.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.onTransitionEnd = this.onTransitionEnd.bind(this);\n    this.drag = this.drag.bind(this);\n    this.onStateChanged = this.onStateChanged.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n  }\n\n  render() {\n    if (!this.prerenderedChildren_) {\n      this.prerenderedChildren_ = [];\n      for (const child of this.children) {\n        this.prerenderedChildren_.push(child);\n      }\n    }\n    return html`\n      <nav @click=\"${this.onBlockClicks}\" class=\"web-side-nav__container\">\n        <div class=\"web-side-nav__header\">\n          <button\n            @click=${this.onCloseSideNav}\n            class=\"web-side-nav__hide\"\n          ></button>\n          <a\n            href=\"/\"\n            class=\"gc-analytics-event\"\n            data-category=\"Site-Wide Custom Events\"\n            data-label=\"Site logo\"\n          >\n            <img\n              class=\"web-side-nav__logo\"\n              src=\"/images/logo.svg\"\n              alt=\"web.dev\"\n            />\n          </a>\n        </div>\n        ${this.prerenderedChildren_}\n      </nav>\n    `;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.tabIndex = -1;\n    store.subscribe(this.onStateChanged);\n  }\n\n  firstUpdated() {\n    this.sideNavContainerEl = this.querySelector(\".web-side-nav__container\");\n    this.addEventListeners();\n    this.onStateChanged();\n    this.classList.remove(\"unresolved\");\n  }\n\n  addEventListeners() {\n    this.addEventListener(\"click\", this.onCloseSideNav);\n    this.addEventListener(\"touchstart\", this.onTouchStart, {passive: true});\n    this.addEventListener(\"touchmove\", this.onTouchMove, {passive: true});\n    this.addEventListener(\"touchend\", this.onTouchEnd);\n  }\n\n  onStateChanged({currentUrl} = {}) {\n    const {isSideNavExpanded} = store.getState();\n    if (isSideNavExpanded === this.expanded) {\n      return;\n    }\n\n    this.expanded = isSideNavExpanded;\n    if (currentUrl) {\n      // Ensure that the \"active\" attribute is applied to any matching header\n      // link, or to none (for random subpages or articles).\n      currentUrl = currentUrl.replace(/\"/g, '\\\\\"');\n      currentUrl = (currentUrl.match(/^\\/\\w+\\//) || [\"\"])[0];\n\n      const active = this.querySelector(\"[active]\");\n      const updated = this.querySelector(`[href=\"${currentUrl}\"]`);\n\n      if (active === updated) {\n        return;\n      }\n\n      if (active) {\n        active.removeAttribute(\"active\");\n        active.removeAttribute(\"aria-current\");\n      }\n\n      if (updated) {\n        updated.setAttribute(\"active\", \"\");\n        updated.setAttribute(\"aria-current\", \"page\");\n      }\n    }\n  }\n\n  onTouchStart(e) {\n    if (!this.expanded) {\n      return;\n    }\n\n    this.startX_ = e.touches[0].pageX;\n    this.currentX_ = this.startX_;\n\n    this.touchingSideNav_ = true;\n    requestAnimationFrame(this.drag);\n  }\n\n  onTouchMove(e) {\n    if (!this.touchingSideNav_) {\n      return;\n    }\n\n    this.currentX_ = e.touches[0].pageX;\n  }\n\n  onTouchEnd(e) {\n    if (!this.touchingSideNav_) {\n      return;\n    }\n\n    this.touchingSideNav_ = false;\n\n    const translateX = Math.min(0, this.currentX_ - this.startX_);\n    this.sideNavContainerEl.style.transform = \"\";\n\n    if (translateX < 0) {\n      this.onCloseSideNav();\n    }\n  }\n\n  drag() {\n    if (!this.touchingSideNav_) {\n      return;\n    }\n\n    requestAnimationFrame(this.drag);\n\n    const translateX = Math.min(0, this.currentX_ - this.startX_);\n    this.sideNavContainerEl.style.transform = `translateX(${translateX}px)`;\n  }\n\n  onBlockClicks(e) {\n    // When the SideNav is expanded we use a ::before element to render the\n    // overlay. Because the ::before element is a child of SideNav, and covers\n    // the entire page, we add a listener to SideNav to see if it was clicked\n    // on.\n    // If a link within the SideNav was clicked, we allow the click to happen so\n    // the router can know about it.\n    // If the SideNav's .web-side-nav__container was clicked, we block the click\n    // so the SideNav won't collapse.\n    // If the click was outside of the container/on the overlay, we close the\n    // SideNav.\n    const link = e.target.closest(\"a\");\n    if (!link) {\n      e.stopPropagation();\n    }\n  }\n\n  onTransitionEnd() {\n    this.animatable = false;\n    // If the SideNav is expanded we need to move focus into the element so\n    // folks using a screen reader or switch can access it.\n    if (this.expanded_) {\n      this.focus();\n    } else {\n      // When the SideNav is collapsed, we need to restore focus to the\n      // hamburger button in the header. It might be more techincally pure to\n      // use a unistore action for this, but it feels like a lot of ceremony\n      // for a small behavior.\n      document.querySelector(\"web-header\").manageFocus();\n    }\n    this.inert = !this.expanded_;\n  }\n\n  onCloseSideNav() {\n    // It's important to call the closeSideNav() action here instead of just\n    // setting expanded = false.\n    // The closeSideNav() action will inform other page elements that they\n    // should un-inert themselves.\n    collapseSideNav();\n  }\n\n  onKeyUp(e) {\n    if (e.key === \"Escape\") {\n      collapseSideNav();\n      document.removeEventListener(\"keyup\", this.onKeyUp);\n    }\n  }\n\n  set expanded(val) {\n    if (this.expanded_ === val) {\n      return;\n    }\n\n    const oldVal = this.expanded_;\n    this.expanded_ = val;\n    this.animatable = true;\n    if (this.expanded_) {\n      document.addEventListener(\"keyup\", this.onKeyUp);\n    }\n    this.addEventListener(\"transitionend\", this.onTransitionEnd, {once: true});\n    this.requestUpdate(\"expanded\", oldVal);\n  }\n\n  get expanded() {\n    return this.expanded_;\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    store.unsubscribe(this.onStateChanged);\n  }\n}\n\ncustomElements.define(\"web-side-nav\", SideNav);\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (factory());\n}(this, (function () { 'use strict';\n\n  /**\n   * Applies the :focus-visible polyfill at the given scope.\n   * A scope in this case is either the top-level Document or a Shadow Root.\n   *\n   * @param {(Document|ShadowRoot)} scope\n   * @see https://github.com/WICG/focus-visible\n   */\n  function applyFocusVisiblePolyfill(scope) {\n    var hadKeyboardEvent = true;\n    var hadFocusVisibleRecently = false;\n    var hadFocusVisibleRecentlyTimeout = null;\n\n    var inputTypesAllowlist = {\n      text: true,\n      search: true,\n      url: true,\n      tel: true,\n      email: true,\n      password: true,\n      number: true,\n      date: true,\n      month: true,\n      week: true,\n      time: true,\n      datetime: true,\n      'datetime-local': true\n    };\n\n    /**\n     * Helper function for legacy browsers and iframes which sometimes focus\n     * elements like document, body, and non-interactive SVG.\n     * @param {Element} el\n     */\n    function isValidFocusTarget(el) {\n      if (\n        el &&\n        el !== document &&\n        el.nodeName !== 'HTML' &&\n        el.nodeName !== 'BODY' &&\n        'classList' in el &&\n        'contains' in el.classList\n      ) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Computes whether the given element should automatically trigger the\n     * `focus-visible` class being added, i.e. whether it should always match\n     * `:focus-visible` when focused.\n     * @param {Element} el\n     * @return {boolean}\n     */\n    function focusTriggersKeyboardModality(el) {\n      var type = el.type;\n      var tagName = el.tagName;\n\n      if (tagName === 'INPUT' && inputTypesAllowlist[type] && !el.readOnly) {\n        return true;\n      }\n\n      if (tagName === 'TEXTAREA' && !el.readOnly) {\n        return true;\n      }\n\n      if (el.isContentEditable) {\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Add the `focus-visible` class to the given element if it was not added by\n     * the author.\n     * @param {Element} el\n     */\n    function addFocusVisibleClass(el) {\n      if (el.classList.contains('focus-visible')) {\n        return;\n      }\n      el.classList.add('focus-visible');\n      el.setAttribute('data-focus-visible-added', '');\n    }\n\n    /**\n     * Remove the `focus-visible` class from the given element if it was not\n     * originally added by the author.\n     * @param {Element} el\n     */\n    function removeFocusVisibleClass(el) {\n      if (!el.hasAttribute('data-focus-visible-added')) {\n        return;\n      }\n      el.classList.remove('focus-visible');\n      el.removeAttribute('data-focus-visible-added');\n    }\n\n    /**\n     * If the most recent user interaction was via the keyboard;\n     * and the key press did not include a meta, alt/option, or control key;\n     * then the modality is keyboard. Otherwise, the modality is not keyboard.\n     * Apply `focus-visible` to any current active element and keep track\n     * of our keyboard modality state with `hadKeyboardEvent`.\n     * @param {KeyboardEvent} e\n     */\n    function onKeyDown(e) {\n      if (e.metaKey || e.altKey || e.ctrlKey) {\n        return;\n      }\n\n      if (isValidFocusTarget(scope.activeElement)) {\n        addFocusVisibleClass(scope.activeElement);\n      }\n\n      hadKeyboardEvent = true;\n    }\n\n    /**\n     * If at any point a user clicks with a pointing device, ensure that we change\n     * the modality away from keyboard.\n     * This avoids the situation where a user presses a key on an already focused\n     * element, and then clicks on a different element, focusing it with a\n     * pointing device, while we still think we're in keyboard modality.\n     * @param {Event} e\n     */\n    function onPointerDown(e) {\n      hadKeyboardEvent = false;\n    }\n\n    /**\n     * On `focus`, add the `focus-visible` class to the target if:\n     * - the target received focus as a result of keyboard navigation, or\n     * - the event target is an element that will likely require interaction\n     *   via the keyboard (e.g. a text box)\n     * @param {Event} e\n     */\n    function onFocus(e) {\n      // Prevent IE from focusing the document or HTML element.\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n        addFocusVisibleClass(e.target);\n      }\n    }\n\n    /**\n     * On `blur`, remove the `focus-visible` class from the target.\n     * @param {Event} e\n     */\n    function onBlur(e) {\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (\n        e.target.classList.contains('focus-visible') ||\n        e.target.hasAttribute('data-focus-visible-added')\n      ) {\n        // To detect a tab/window switch, we look for a blur event followed\n        // rapidly by a visibility change.\n        // If we don't see a visibility change within 100ms, it's probably a\n        // regular focus change.\n        hadFocusVisibleRecently = true;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {\n          hadFocusVisibleRecently = false;\n        }, 100);\n        removeFocusVisibleClass(e.target);\n      }\n    }\n\n    /**\n     * If the user changes tabs, keep track of whether or not the previously\n     * focused element had .focus-visible.\n     * @param {Event} e\n     */\n    function onVisibilityChange(e) {\n      if (document.visibilityState === 'hidden') {\n        // If the tab becomes active again, the browser will handle calling focus\n        // on the element (Safari actually calls it twice).\n        // If this tab change caused a blur on an element with focus-visible,\n        // re-apply the class when the user switches back to the tab.\n        if (hadFocusVisibleRecently) {\n          hadKeyboardEvent = true;\n        }\n        addInitialPointerMoveListeners();\n      }\n    }\n\n    /**\n     * Add a group of listeners to detect usage of any pointing devices.\n     * These listeners will be added when the polyfill first loads, and anytime\n     * the window is blurred, so that they are active when the window regains\n     * focus.\n     */\n    function addInitialPointerMoveListeners() {\n      document.addEventListener('mousemove', onInitialPointerMove);\n      document.addEventListener('mousedown', onInitialPointerMove);\n      document.addEventListener('mouseup', onInitialPointerMove);\n      document.addEventListener('pointermove', onInitialPointerMove);\n      document.addEventListener('pointerdown', onInitialPointerMove);\n      document.addEventListener('pointerup', onInitialPointerMove);\n      document.addEventListener('touchmove', onInitialPointerMove);\n      document.addEventListener('touchstart', onInitialPointerMove);\n      document.addEventListener('touchend', onInitialPointerMove);\n    }\n\n    function removeInitialPointerMoveListeners() {\n      document.removeEventListener('mousemove', onInitialPointerMove);\n      document.removeEventListener('mousedown', onInitialPointerMove);\n      document.removeEventListener('mouseup', onInitialPointerMove);\n      document.removeEventListener('pointermove', onInitialPointerMove);\n      document.removeEventListener('pointerdown', onInitialPointerMove);\n      document.removeEventListener('pointerup', onInitialPointerMove);\n      document.removeEventListener('touchmove', onInitialPointerMove);\n      document.removeEventListener('touchstart', onInitialPointerMove);\n      document.removeEventListener('touchend', onInitialPointerMove);\n    }\n\n    /**\n     * When the polfyill first loads, assume the user is in keyboard modality.\n     * If any event is received from a pointing device (e.g. mouse, pointer,\n     * touch), turn off keyboard modality.\n     * This accounts for situations where focus enters the page from the URL bar.\n     * @param {Event} e\n     */\n    function onInitialPointerMove(e) {\n      // Work around a Safari quirk that fires a mousemove on <html> whenever the\n      // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n      if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {\n        return;\n      }\n\n      hadKeyboardEvent = false;\n      removeInitialPointerMoveListeners();\n    }\n\n    // For some kinds of state, we are interested in changes at the global scope\n    // only. For example, global pointer input, global key presses and global\n    // visibility change should affect the state at every scope:\n    document.addEventListener('keydown', onKeyDown, true);\n    document.addEventListener('mousedown', onPointerDown, true);\n    document.addEventListener('pointerdown', onPointerDown, true);\n    document.addEventListener('touchstart', onPointerDown, true);\n    document.addEventListener('visibilitychange', onVisibilityChange, true);\n\n    addInitialPointerMoveListeners();\n\n    // For focus and blur, we specifically care about state changes in the local\n    // scope. This is because focus / blur events that originate from within a\n    // shadow root are not re-dispatched from the host element if it was already\n    // the active element in its own scope:\n    scope.addEventListener('focus', onFocus, true);\n    scope.addEventListener('blur', onBlur, true);\n\n    // We detect that a node is a ShadowRoot by ensuring that it is a\n    // DocumentFragment and also has a host property. This check covers native\n    // implementation and polyfill implementation transparently. If we only cared\n    // about the native implementation, we could just check if the scope was\n    // an instance of a ShadowRoot.\n    if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {\n      // Since a ShadowRoot is a special kind of DocumentFragment, it does not\n      // have a root element to add a class to. So, we add this attribute to the\n      // host element instead:\n      scope.host.setAttribute('data-js-focus-visible', '');\n    } else if (scope.nodeType === Node.DOCUMENT_NODE) {\n      document.documentElement.classList.add('js-focus-visible');\n      document.documentElement.setAttribute('data-js-focus-visible', '');\n    }\n  }\n\n  // It is important to wrap all references to global window and document in\n  // these checks to support server-side rendering use cases\n  // @see https://github.com/WICG/focus-visible/issues/199\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    // Make the polyfill helper globally available. This can be used as a signal\n    // to interested libraries that wish to coordinate with the polyfill for e.g.,\n    // applying the polyfill to a shadow root:\n    window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill;\n\n    // Notify interested libraries of the polyfill's presence, in case the\n    // polyfill was loaded lazily:\n    var event;\n\n    try {\n      event = new CustomEvent('focus-visible-polyfill-ready');\n    } catch (error) {\n      // IE11 does not support using CustomEvent as a constructor directly:\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});\n    }\n\n    window.dispatchEvent(event);\n  }\n\n  if (typeof document !== 'undefined') {\n    // Apply the polyfill to the global document, so that no JavaScript\n    // coordination is required to use the polyfill in the top-level document:\n    applyFocusVisiblePolyfill(document);\n  }\n\n})));\n","import \"./components/Header\";\nimport \"./components/SideNav\";\nimport {store} from \"./store\";\nimport \"focus-visible\";\nimport { checkIfUserAcceptsCookies } from \"./actions\";\n\n// Configures global page state\nfunction onGlobalStateChanged({isSignedIn, isPageLoading}) {\n    const progress = document.querySelector(\".w-loading-progress\");\n    progress.hidden = !isPageLoading;\n\n    const main = document.querySelector(\"main\");\n    if (isPageLoading) {\n        main.setAttribute(\"aria-busy\", \"true\");\n    } else {\n        main.removeAttribute(\"aria-busy\");\n    }\n}\n\nstore.subscribe(onGlobalStateChanged);\nonGlobalStateChanged(store.getState());\n\n// Give elemetns time to set up before kicking off state changes.\n// This is useful for elements with CSS animations who need to have been\n// rendered to the page at least once before they start transitioning.\n// CUrrently this includes the Snackbar.\nsetTimeout(() => {\n    checkIfUserAcceptsCookies();\n}, 0);"]}