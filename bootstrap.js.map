{"version":3,"sources":["../src/lib/webcomponents-config.js","../node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js","../src/lib/utils/underscore-import-polyfill.js","../src/lib/loader.js","../src/lib/utils/router.js","../src/lib/bootstrap.js"],"names":["window","WebComponents","root","flushFn","polyfillsLoaded","whenLoadedFns","allowUpgrades","fireEvent","ready","document","dispatchEvent","CustomEvent","bubbles","batchCustomElements","customElements","polyfillWrapFlushCallback","flushCallback","HTMLTemplateElement","bootstrap","runWhenLoadedFns","then","fnsMap","map","fn","Function","Promise","all","catch","err","console","error","waitFor","waitFn","push","_batchCustomElements","name","polyfills","Element","prototype","ShadyDOM","force","forcePolyfill","needsTemplate","t","createElement","content","cloneNode","DocumentFragment","t2","appendChild","clone","childNodes","length","firstChild","Array","from","URL","Symbol","url","polyfillFile","join","script","querySelector","src","replace","newScript","readyState","setAttribute","write","outerHTML","addEventListener","Error","head","removeEventListener","seen","_import","startsWith","substr","previous","undefined","p","resolve","reject","n","Object","assign","type","onload","onerror","append","domparser","DOMParser","async","loadEntrypoint","getPage","headers","Headers","set","res","fetch","ok","status","text","parseFromString","normalizeUrl","u","location","pathname","endsWith","slice","search","forceFocus","el","hasAttribute","focus","tabIndex","classList","add","e","removeAttribute","remove","once","swapContent","isFirstRun","entrypointPromise","normalized","history","replaceState","hash","store","setState","isPageLoading","main","page","currentUrl","title","description","updatedContent","isOffline","Boolean","getMeta","globalHandler","recentActiveUrl","getUrl","scrollOnFrame","target","scrollIntoView","block","documentElement","scrollTop","onReplaceState","onPopState","updatedUrl","state","success","onDedupScroll","onClick","ctrlKey","metaKey","altKey","shiftKey","button","defaultPrevented","link","closest","host","match","route","href","preventDefault","listen","handler","pendingHandlerPromise","requestCount","localRequest","scrollTimeout","clearTimeout","setTimeout","passive","candidateUrl","pushState","toString","getElementById","reload","info","config","version","body","router.listen","getState","router.reload","navigator","serviceWorker","register"],"mappings":"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","sourcesContent":["/**\n * @fileoverview Configures the WebComponents polyfill path.\n * \n * This needs to occur in its own file that is included _before_ the loader itself, because ES6\n * modules are all hoisted in the order in which then are found.\n */\n\n // Set the production path for the Web Components polyfills. Must have leading and tailing slash.\n // This actually loos inside the root PLUS \"bundles/<filename>\".\n // This isn't configurable as we don't need the polyfill in dev.\n window.WebComponents = {root: \"/lib/webcomponents/\"};","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\n(function() {\n  'use strict';\n\n  /**\n   * Basic flow of the loader process\n   *\n   * There are 4 flows the loader can take when booting up\n   *\n   * - Synchronous script, no polyfills needed\n   *   - wait for `DOMContentLoaded`\n   *   - fire WCR event, as there could not be any callbacks passed to `waitFor`\n   *\n   * - Synchronous script, polyfills needed\n   *   - document.write the polyfill bundle\n   *   - wait on the `load` event of the bundle to batch Custom Element upgrades\n   *   - wait for `DOMContentLoaded`\n   *   - run callbacks passed to `waitFor`\n   *   - fire WCR event\n   *\n   * - Asynchronous script, no polyfills needed\n   *   - wait for `DOMContentLoaded`\n   *   - run callbacks passed to `waitFor`\n   *   - fire WCR event\n   *\n   * - Asynchronous script, polyfills needed\n   *   - Append the polyfill bundle script\n   *   - wait for `load` event of the bundle\n   *   - batch Custom Element Upgrades\n   *   - run callbacks pass to `waitFor`\n   *   - fire WCR event\n   */\n\n  var polyfillsLoaded = false;\n  var whenLoadedFns = [];\n  var allowUpgrades = false;\n  var flushFn;\n\n  function fireEvent() {\n    window.WebComponents.ready = true;\n    document.dispatchEvent(new CustomEvent('WebComponentsReady', { bubbles: true }));\n  }\n\n  function batchCustomElements() {\n    if (window.customElements && customElements.polyfillWrapFlushCallback) {\n      customElements.polyfillWrapFlushCallback(function (flushCallback) {\n        flushFn = flushCallback;\n        if (allowUpgrades) {\n          flushFn();\n        }\n      });\n    }\n  }\n\n  function asyncReady() {\n    batchCustomElements();\n    ready();\n  }\n\n  function ready() {\n    // bootstrap <template> elements before custom elements\n    if (window.HTMLTemplateElement && HTMLTemplateElement.bootstrap) {\n      HTMLTemplateElement.bootstrap(window.document);\n    }\n    polyfillsLoaded = true;\n    runWhenLoadedFns().then(fireEvent);\n  }\n\n  function runWhenLoadedFns() {\n    allowUpgrades = false;\n    var fnsMap = whenLoadedFns.map(function(fn) {\n      return fn instanceof Function ? fn() : fn;\n    });\n    whenLoadedFns = [];\n    return Promise.all(fnsMap).then(function() {\n      allowUpgrades = true;\n      flushFn && flushFn();\n    }).catch(function(err) {\n      console.error(err);\n    });\n  }\n\n  window.WebComponents = window.WebComponents || {};\n  window.WebComponents.ready = window.WebComponents.ready || false;\n  window.WebComponents.waitFor = window.WebComponents.waitFor || function(waitFn) {\n    if (!waitFn) {\n      return;\n    }\n    whenLoadedFns.push(waitFn);\n    if (polyfillsLoaded) {\n      runWhenLoadedFns();\n    }\n  };\n  window.WebComponents._batchCustomElements = batchCustomElements;\n\n  var name = 'webcomponents-loader.js';\n  // Feature detect which polyfill needs to be imported.\n  var polyfills = [];\n  if (!('attachShadow' in Element.prototype && 'getRootNode' in Element.prototype) ||\n    (window.ShadyDOM && window.ShadyDOM.force)) {\n    polyfills.push('sd');\n  }\n  if (!window.customElements || window.customElements.forcePolyfill) {\n    polyfills.push('ce');\n  }\n\n  var needsTemplate = (function() {\n    // no real <template> because no `content` property (IE and older browsers)\n    var t = document.createElement('template');\n    if (!('content' in t)) {\n      return true;\n    }\n    // broken doc fragment (older Edge)\n    if (!(t.content.cloneNode() instanceof DocumentFragment)) {\n      return true;\n    }\n    // broken <template> cloning (Edge up to at least version 17)\n    var t2 = document.createElement('template');\n    t2.content.appendChild(document.createElement('div'));\n    t.content.appendChild(t2);\n    var clone = t.cloneNode(true);\n    return (clone.content.childNodes.length === 0 ||\n        clone.content.firstChild.content.childNodes.length === 0);\n  })();\n\n  // NOTE: any browser that does not have template or ES6 features\n  // must load the full suite of polyfills.\n  if (!window.Promise || !Array.from || !window.URL || !window.Symbol || needsTemplate) {\n    polyfills = ['sd-ce-pf'];\n  }\n\n  if (polyfills.length) {\n    var url;\n    var polyfillFile = 'bundles/webcomponents-' + polyfills.join('-') + '.js';\n\n    // Load it from the right place.\n    if (window.WebComponents.root) {\n      url = window.WebComponents.root + polyfillFile;\n    } else {\n      var script = document.querySelector('script[src*=\"' + name +'\"]');\n      // Load it from the right place.\n      url = script.src.replace(name, polyfillFile);\n    }\n\n    var newScript = document.createElement('script');\n    newScript.src = url;\n    // if readyState is 'loading', this script is synchronous\n    if (document.readyState === 'loading') {\n      // make sure custom elements are batched whenever parser gets to the injected script\n      newScript.setAttribute('onload', 'window.WebComponents._batchCustomElements()');\n      document.write(newScript.outerHTML);\n      document.addEventListener('DOMContentLoaded', ready);\n    } else {\n      newScript.addEventListener('load', function () {\n        asyncReady();\n      });\n      newScript.addEventListener('error', function () {\n        throw new Error('Could not load polyfill bundle' + url);\n      });\n      document.head.appendChild(newScript);\n    }\n  } else {\n    // if readyState is 'complete', script is loaded imperatively on a spec-compliant browser, so just fire WCR\n    if (document.readyState === 'complete') {\n      polyfillsLoaded = true;\n      fireEvent();\n    } else {\n      // this script may come between DCL and load, so listen for both, and cancel load listener if DCL fires\n      window.addEventListener('load', ready);\n      window.addEventListener('DOMContentLoaded', function() {\n        window.removeEventListener('load', ready);\n        ready();\n      })\n    }\n  }\n})();\n","const seen = {};\n\n/**\n * Provides a simple dynamic `import()` polyfill on `windows._import`.\n * \n * Does not return the exports from the module: llighter.github.io doesn't use import this way.\n * \n * @param {string} src\n * @return {!Promise<?>}\n */\nwindow._import = (src) => {\n    // Rollup generates relative paths, but they're all relative to top level.\n    if (src.startsWith(\"./\")) {\n        src = src.substr(2);\n    }\n\n    // We only need this cache for Edge, as it doesn't fire onload for module\n    // scripts that have already loaded, unlike every other browser. When Edge\n    // support is dropped, we can just include the Promise below.\n    const previous = seen[src];\n    if (previous !== undefined) {\n        return previous;\n    }\n\n    const p = new Promise((resolve, reject) => {\n        const n = Object.assign(document.createElement(\"script\"), {\n            src: `/${src}`  // Rollup generates sources only in top-level\n            , type: \"module\"\n            , onload: () => resolve()\n            , onerror: reject\n        });\n        document.head.append(n);\n    });\n    \n    seen[src] = p;\n    return p;\n}\n","import {store} from \"./store\";\nimport \"./utils/underscore-import-polyfill\";\nimport getMeta from \"./utils/meta\";\n\nconst domparser = new DOMParser();\n\n/**\n * Dynamically load code required for the passed URL entrypoint.\n * \n * @param {string} url of the page to laod modules for.\n * @return {!Promise<?>}\n */\nasync function loadEntrypoint(url) {\n    return import(\"./pages/default.js\");\n}\n\n/**\n * Fetch a page as an html string.\n * @param {string} url url of the page to fetch.\n * @return  {!HTMLDocument}\n */\nasync function getPage(url) {\n    // Pass a custom header so that the Service Worker knows this request is\n    // actually for a document, this is used to reply with an offline page\n    const headers = new Headers();\n    headers.set(\"X-Document\", \"1\");\n\n    const res = await fetch(url, {headers});\n    if (!res.ok && res.status !== 404) {\n        throw res.status;\n    }\n\n    const text = await res.text();\n    return domparser.parseFromString(text, \"text/html\");\n}\n\nfunction normalizeUrl(url) {\n    const u = new URL(url, window.location);\n    let pathname = u.pathname;\n\n    if (pathname.endsWith(\"/index.html\")) {\n        // If an internal link refers to \"/foo/index.html\", strip \"index.html\" and load.\n        pathname = pathname.slice(0, -\"index.html\".length);\n    } else if (!pathname.endsWith(\"/\")) {\n        // All llighter.github.io pages end with \"/\".\n        pathname = `${url}/`;\n    }\n\n    return pathname + u.search\n}\n\n/**\n * Force the user's cursor to the target element, making it focusable if needed.\n * After the user blurs from the target, it will restore to its initial state.\n * \n * @param {?Element} el\n */\nfunction forceFocus(el) {\n    if (!el) {\n        // do nothing\n    } else if (el.hasAttribute(\"tabindex\")) {\n        el.focus();\n    } else {\n        // nb. This will also operate on elements that implicitly allow focus, but\n        // it should be harmless there (aside hiding the focus ring with\n        // w-force-focus).\n        el.tabIndex = -1;\n        el.focus();\n        el.classList.add(\"w-force-focus\");\n\n        el.addEventListener(\n            \"blue\",\n            (e) => {\n                el.removeAttribute(\"tabindex\");\n                el.classList.remove(\"w-force-focus\");\n            },\n            {once: true},\n        );\n    }\n}\n\n// /**\n//  * Swap the current page for a new one. Assumes the current URL is the target.\n//  * @param {boolean} isFirstRun whether this is the first run\n//  * @return {!Promise<void>}\n//  */\n// export async function swapContent(isFirstRun) {\n//     let url = window.location.pathname + window.location.search;\n//     const entrypointPromise = loadEntrypoint(url);\n\n//     // If we disagree with the URL we're loaded at, the replace it inline\n//     const normalized = normalizeUrl(url);\n//     if (normalized) {\n//         window.history.replaceState(null ,null, normalized + window.location.hash);\n//         url = window.location.pathname = window.location.search;\n//     }\n\n//     // When the router boots it will always try to run a handler for the current\n//     // route. We don't need this for the HTML of the initial page load so we\n//     // cancel it, but wait for the page's JS to load.\n//     if (isFirstRun) {\n//         await entrypointPromise;\n//         return;\n//     }\n\n//     store.setState({isPageLoading: true});\n\n//     const main  = document.querySelector(\"main\");\n\n//     // Grap the new page content\n//     let page;\n//     let content;\n//     try {\n//         page = await getPage(url);\n//         content = page.querySelector(\"#content\");\n//         if (content === null) {\n//             throw new Error(`no #content found: ${url}`);\n//         }\n//         await entrypointPromise;\n//     } finally {\n//         // We set the currentUrl in global state _after_ the page has loaded. This\n//         // is different than the History API itself which transitions immediatrly.\n//         store.setState({\n//             isPageLoading: false\n//             , currentUrl: url\n//         });\n//     }\n\n//     // TODO: I don't use google analytics yet\n//     // ga(\"set\", \"page\", window.location.pathname);\n//     // ga(\"send\", \"pageview\");\n\n//     // Remove the current #content element\n//     main.querySelector(\"#content\").remove();\n//     main.appendChild(page.querySelector(\"content\"));\n\n//     // Update the page title\n//     document.timeline = page.title;\n//     // Update the page description\n//     const description = page.querySelector(\"meta[name=description]\");\n//     const updatedContent = description ? description.content : \"\";\n//     document.querySelector(\"meta[name=description]\").content = updatedContent;\n\n//     // Focus on the first title (or fallback to content itself)\n//     forceFocus(content.querySelector(\"h1, h2, h3, h4, h5, h6\") || content);\n\n//     // Determine if this was the offline page\n//     const isOffline = Boolean(getMeta(\"offline\"), page);\n\n//     store.setState({\n//         isPageLoading: false\n//         , isOffline\n//     });\n// }\n\n/**\n * Swap the current page for a new one. Assumes the current URL is the target.\n * @param {boolean} isFirstRun whether this is the first run\n * @return {!Promise<void>}\n */\nexport async function swapContent(isFirstRun) {\n    let url = window.location.pathname + window.location.search;\n    const entrypointPromise = loadEntrypoint(url);\n  \n    // If we disagree with the URL we're loaded at, then replace it inline\n    const normalized = normalizeUrl(url);\n    if (normalized) {\n      window.history.replaceState(null, null, normalized + window.location.hash);\n      url = window.location.pathname + window.location.search;\n    }\n  \n    // When the router boots it will always try to run a handler for the current\n    // route. We don't need this for the HTML of the initial page load so we\n    // cancel it, but wait for the page's JS to load.\n    if (isFirstRun) {\n      await entrypointPromise;\n      return;\n    }\n  \n    store.setState({isPageLoading: true});\n  \n    const main = document.querySelector(\"main\");\n  \n    // Grab the new page content\n    let page;\n    let content;\n    try {\n      page = await getPage(url);\n      content = page.querySelector(\"#content\");\n      if (content === null) {\n        throw new Error(`no #content found: ${url}`);\n      }\n      await entrypointPromise;\n    } finally {\n      // We set the currentUrl in global state _after_ the page has loaded. This\n      // is different than the History API itself which transitions immediately.\n      store.setState({\n        isPageLoading: false,\n        currentUrl: url,\n      });\n    }\n  \n    // Remove the current #content element\n    main.querySelector(\"#content\").remove();\n    main.appendChild(page.querySelector(\"#content\"));\n  \n    // Update the page title\n    document.title = page.title;\n    // Update the page description\n    const description = page.querySelector(\"meta[name=description]\");\n    const updatedContent = description ? description.content : \"\";\n    document.querySelector(\"meta[name=description]\").content = updatedContent;\n  \n    // Focus on the first title (or fallback to content itself)\n    forceFocus(content.querySelector(\"h1, h2, h3, h4, h5, h6\") || content);\n  \n    // Determine if this was the offline page\n    const isOffline = Boolean(getMeta(\"offline\", page));\n  \n    store.setState({\n      isPageLoading: false,\n      isOffline,\n    });\n  }","let globalHandler;\nlet recentActiveUrl; // current URL not including hash\n\n/**\n * @return {string} URL pathname plus optional search part\n */\nfunction getUrl() {\n  return window.location.pathname + window.location.search;\n}\n\n/**\n * Brings the target element, or top scroll position, into view.\n *\n * @param {!Element|number} target\n */\nfunction scrollOnFrame(target) {\n  if (target instanceof Element) {\n    // nb. this avoids collision with top menubars etc\n    target.scrollIntoView({block: \"center\"});\n  } else {\n    document.documentElement.scrollTop = +target || 0;\n  }\n}\n\n/**\n * The caller wants to change the active URL. Let them, without triggering any\n * new loads.\n *\n * @param {!Event} e\n */\nfunction onReplaceState(e) {\n  recentActiveUrl = getUrl();\n}\n\n/**\n * The user has gone forward or back in the stack. Reload new content, or do\n * nothing if it was just a hash change.\n *\n * @param {!Event} e\n */\nfunction onPopState(e) {\n  const updatedUrl = getUrl();\n  if (recentActiveUrl === updatedUrl) {\n    // This was just a change in hash. Do nothing and let the browser run its\n    // own behavior.\n    return;\n  }\n  recentActiveUrl = updatedUrl;\n  const state = window.history.state;\n  globalHandler().then((success) => {\n    if (success) {\n      scrollOnFrame(state ? state.scrollTop : 0);\n    }\n  });\n}\n\n/**\n * Retain the current scroll position for forward/back stack changes.\n */\nfunction onDedupScroll() {\n  const state = {\n    scrollTop: document.documentElement.scrollTop,\n  };\n  window.history.replaceState(state, null, null);\n}\n\n/**\n * Click handler that intercepts potential URL changes via <a href=\"...\">.\n *\n * @param {!MouseEvent} e\n */\nfunction onClick(e) {\n  if (\n    e.ctrlKey ||\n    e.metaKey ||\n    e.altKey ||\n    e.shiftKey ||\n    e.button ||\n    e.defaultPrevented\n  ) {\n    return;\n  }\n\n  // nb. If this ever supports Shadow DOM, we can use .composedPath to find\n  // the nearest link inside an open Shadow Root.\n  const link = e.target.closest(\"a[href]\");\n  if (\n    !link ||\n    link.target ||\n    link.host !== location.host ||\n    link.pathname.match(/\\.(jpg|png|gif|svg|webp)$/)\n  ) {\n    return;\n  }\n\n  if (route(link.href)) {\n    e.preventDefault();\n  }\n}\n\n/**\n * Adds global page listeners for SPA routing.\n *\n * @param {function(string, boolean=): void} handler\n */\nexport function listen(handler) {\n  if (!handler) {\n    throw new Error(\"need handler\");\n  }\n  listen = () => {\n    throw new Error(\"listen can only be called once\");\n  };\n\n  let pendingHandlerPromise = Promise.resolve();\n  let requestCount = 0;\n\n  // globalHandler is called for the current page URL (i.e., it reads\n  // window.location rather than accepting an argument) to trigger a load via\n  // the passed handler. Only one handler can run at once.\n  globalHandler = () => {\n    const localRequest = ++requestCount;\n\n    // Delay until any previous load is complete, then run handler for the\n    // now-active URL.\n    pendingHandlerPromise = pendingHandlerPromise\n      .then(async () => {\n        if (localRequest !== requestCount) {\n          return false;\n        }\n        await handler();\n        return true;\n      })\n      .catch((err) => {\n        window.location.href = window.location.href;\n        throw err;\n      });\n    return pendingHandlerPromise;\n  };\n\n  window.addEventListener(\"replacestate\", onReplaceState);\n  window.addEventListener(\"popstate\", onPopState);\n  window.addEventListener(\"click\", onClick);\n\n  // Write scroll value after settling.\n  let scrollTimeout = 0;\n  window.addEventListener(\n    \"scroll\",\n    () => {\n      window.clearTimeout(scrollTimeout);\n      scrollTimeout = window.setTimeout(onDedupScroll, 250);\n    },\n    {passive: true},\n  );\n\n  // Don't catch errors for the first load.\n  recentActiveUrl = getUrl();\n  handler(true);\n}\n\n/**\n * Optionally routes to the target URL.\n *\n * @param {string} url to load\n * @return {boolean} whether a route happened and to prevent default behavior\n */\nexport function route(url) {\n  if (!globalHandler) {\n    throw new Error(\"listen() not called\");\n  }\n  const u = new URL(url, window.location);\n\n  // Check if this is the same URL, but has a hash. If so, allow the *browser*\n  // to move to the correct target on the page.\n  const candidateUrl = u.pathname + u.search;\n  if (candidateUrl === getUrl() && u.hash) {\n    return false;\n  }\n  recentActiveUrl = candidateUrl;\n\n  window.history.pushState(null, null, u.toString()); // Edge needs toString\n  globalHandler().then((success) => {\n    if (success) {\n      // Since we're loading this page dynamically, look for the target hash-ed\n      // element (if any) and scroll to it.\n      const target = document.getElementById(u.hash.substr(1)) || 0;\n      return scrollOnFrame(target);\n    }\n  });\n  return true;\n}\n\n/**\n * Requests a reload of the current page using the registered handler.\n */\nexport function reload() {\n  globalHandler();\n}\n","/**\n * @fileoverview Site bootstrap code.\n *\n * This should import minimal site code, as it exists to load relevant polyfills and then the\n * correct entrypoint via our router.\n */\n\nimport config from \"yunhaind_config\";\nimport \"./webcomponents-config\"; // must go before -loader below\nimport \"@webcomponents/webcomponentsjs/webcomponents-loader.js\";\nimport {swapContent} from \"./loader\";\nimport * as router from \"./utils/router\";\nimport {store} from \"./store\";\n\nconsole.info(\"llighter.github.io\", config.version);\n\nWebComponents.waitFor(async () => {\n  // TODO(samthor): This isn't quite the right class name because not all Web Components are ready\n  // at this point due to code-splitting.\n  document.body.classList.remove(\"unresolved\");\n\n  // Run as long-lived router w/ history & \"<a>\" bindings\n  // Also immediately calls `swapContent()` handler for current location,\n  // loading its required JS entrypoint\n  router.listen(swapContent);\n\n  // If the site becomes online again, and the special offline page was shown,\n  // then trigger a reload\n  window.addEventListener(\"online\", () => {\n    const {isOffline} = store.getState();\n    if (isOffline) {\n      router.reload();\n    }\n  });\n});\n\nif (\"serviceWorker\" in navigator) {\n  navigator.serviceWorker.register(\"/sw.js\");\n}\n"]}